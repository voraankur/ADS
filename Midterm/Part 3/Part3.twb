<?xml version='1.0' encoding='utf-8' ?>

<!-- build 10000.16.0917.1429                               -->
<workbook source-build='10.0.1 (10000.16.0917.1429)' source-platform='win' version='10.0' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='ordered_complete_data' inline='true' name='federated.1efcubg0qqmu4916bf4m60c3bct6' version='10.0'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='ordered_complete_data' name='textscan.0mwrzuw1jvhmlj18ewkda00x197h'>
            <connection class='textscan' directory='C:/Users/kruti/Desktop/ADS/Midterm/Part1' filename='ordered_complete_data.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <relation connection='textscan.0mwrzuw1jvhmlj18ewkda00x197h' name='ordered_complete_data.csv' table='[ordered_complete_data#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='integer' name='F1' ordinal='0' />
            <column datatype='date' name='date' ordinal='1' />
            <column datatype='integer' name='hour' ordinal='2' />
            <column datatype='string' name='building' ordinal='3' />
            <column datatype='integer' name='BuildingID' ordinal='4' />
            <column datatype='integer' name='meternumb' ordinal='5' />
            <column datatype='string' name='type' ordinal='6' />
            <column datatype='integer' name='Consumption' ordinal='7' />
            <column datatype='integer' name='weekOfDay' ordinal='8' />
            <column datatype='integer' name='month' ordinal='9' />
            <column datatype='integer' name='Weekday' ordinal='10' />
            <column datatype='boolean' name='baseHourFlag' ordinal='11' />
            <column datatype='integer' name='isHoliday' ordinal='12' />
            <column datatype='integer' name='area_floor._m.sqr' ordinal='13' />
            <column datatype='real' name='norm_consumption' ordinal='14' />
            <column datatype='datetime' name='Time' ordinal='15' />
            <column datatype='real' name='TemperatureF' ordinal='16' />
            <column datatype='real' name='Dew_PointF' ordinal='17' />
            <column datatype='integer' name='Humidity' ordinal='18' />
            <column datatype='real' name='Sea_Level_PressureIn' ordinal='19' />
            <column datatype='real' name='VisibilityMPH' ordinal='20' />
            <column datatype='string' name='Wind_Direction' ordinal='21' />
            <column datatype='real' name='Wind_SpeedMPH' ordinal='22' />
            <column datatype='real' name='Gust_SpeedMPH' ordinal='23' />
            <column datatype='string' name='PrecipitationIn' ordinal='24' />
            <column datatype='string' name='Events' ordinal='25' />
            <column datatype='string' name='Conditions' ordinal='26' />
            <column datatype='integer' name='WindDirDegrees' ordinal='27' />
            <column datatype='datetime' name='DateUTC' ordinal='28' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>F1</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F1]</local-name>
            <parent-name>[ordered_complete_data.csv]</parent-name>
            <remote-alias>F1</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>date</remote-name>
            <remote-type>133</remote-type>
            <local-name>[date]</local-name>
            <parent-name>[ordered_complete_data.csv]</parent-name>
            <remote-alias>date</remote-alias>
            <ordinal>1</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;date&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>hour</remote-name>
            <remote-type>20</remote-type>
            <local-name>[hour]</local-name>
            <parent-name>[ordered_complete_data.csv]</parent-name>
            <remote-alias>hour</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>building</remote-name>
            <remote-type>129</remote-type>
            <local-name>[building]</local-name>
            <parent-name>[ordered_complete_data.csv]</parent-name>
            <remote-alias>building</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>BuildingID</remote-name>
            <remote-type>20</remote-type>
            <local-name>[BuildingID]</local-name>
            <parent-name>[ordered_complete_data.csv]</parent-name>
            <remote-alias>BuildingID</remote-alias>
            <ordinal>4</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>meternumb</remote-name>
            <remote-type>20</remote-type>
            <local-name>[meternumb]</local-name>
            <parent-name>[ordered_complete_data.csv]</parent-name>
            <remote-alias>meternumb</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>type</remote-name>
            <remote-type>129</remote-type>
            <local-name>[type]</local-name>
            <parent-name>[ordered_complete_data.csv]</parent-name>
            <remote-alias>type</remote-alias>
            <ordinal>6</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Consumption</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Consumption]</local-name>
            <parent-name>[ordered_complete_data.csv]</parent-name>
            <remote-alias>Consumption</remote-alias>
            <ordinal>7</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>weekOfDay</remote-name>
            <remote-type>20</remote-type>
            <local-name>[weekOfDay]</local-name>
            <parent-name>[ordered_complete_data.csv]</parent-name>
            <remote-alias>weekOfDay</remote-alias>
            <ordinal>8</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>month</remote-name>
            <remote-type>20</remote-type>
            <local-name>[month]</local-name>
            <parent-name>[ordered_complete_data.csv]</parent-name>
            <remote-alias>month</remote-alias>
            <ordinal>9</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Weekday</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Weekday]</local-name>
            <parent-name>[ordered_complete_data.csv]</parent-name>
            <remote-alias>Weekday</remote-alias>
            <ordinal>10</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>baseHourFlag</remote-name>
            <remote-type>11</remote-type>
            <local-name>[baseHourFlag]</local-name>
            <parent-name>[ordered_complete_data.csv]</parent-name>
            <remote-alias>baseHourFlag</remote-alias>
            <ordinal>11</ordinal>
            <local-type>boolean</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;bool&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>isHoliday</remote-name>
            <remote-type>20</remote-type>
            <local-name>[isHoliday]</local-name>
            <parent-name>[ordered_complete_data.csv]</parent-name>
            <remote-alias>isHoliday</remote-alias>
            <ordinal>12</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>area_floor._m.sqr</remote-name>
            <remote-type>20</remote-type>
            <local-name>[area_floor._m.sqr]</local-name>
            <parent-name>[ordered_complete_data.csv]</parent-name>
            <remote-alias>area_floor._m.sqr</remote-alias>
            <ordinal>13</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>norm_consumption</remote-name>
            <remote-type>5</remote-type>
            <local-name>[norm_consumption]</local-name>
            <parent-name>[ordered_complete_data.csv]</parent-name>
            <remote-alias>norm_consumption</remote-alias>
            <ordinal>14</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Time</remote-name>
            <remote-type>135</remote-type>
            <local-name>[Time]</local-name>
            <parent-name>[ordered_complete_data.csv]</parent-name>
            <remote-alias>Time</remote-alias>
            <ordinal>15</ordinal>
            <local-type>datetime</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;datetime&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TemperatureF</remote-name>
            <remote-type>5</remote-type>
            <local-name>[TemperatureF]</local-name>
            <parent-name>[ordered_complete_data.csv]</parent-name>
            <remote-alias>TemperatureF</remote-alias>
            <ordinal>16</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Dew_PointF</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Dew_PointF]</local-name>
            <parent-name>[ordered_complete_data.csv]</parent-name>
            <remote-alias>Dew_PointF</remote-alias>
            <ordinal>17</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Humidity</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Humidity]</local-name>
            <parent-name>[ordered_complete_data.csv]</parent-name>
            <remote-alias>Humidity</remote-alias>
            <ordinal>18</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sea_Level_PressureIn</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Sea_Level_PressureIn]</local-name>
            <parent-name>[ordered_complete_data.csv]</parent-name>
            <remote-alias>Sea_Level_PressureIn</remote-alias>
            <ordinal>19</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>VisibilityMPH</remote-name>
            <remote-type>5</remote-type>
            <local-name>[VisibilityMPH]</local-name>
            <parent-name>[ordered_complete_data.csv]</parent-name>
            <remote-alias>VisibilityMPH</remote-alias>
            <ordinal>20</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Wind_Direction</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Wind_Direction]</local-name>
            <parent-name>[ordered_complete_data.csv]</parent-name>
            <remote-alias>Wind_Direction</remote-alias>
            <ordinal>21</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Wind_SpeedMPH</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Wind_SpeedMPH]</local-name>
            <parent-name>[ordered_complete_data.csv]</parent-name>
            <remote-alias>Wind_SpeedMPH</remote-alias>
            <ordinal>22</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Gust_SpeedMPH</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Gust_SpeedMPH]</local-name>
            <parent-name>[ordered_complete_data.csv]</parent-name>
            <remote-alias>Gust_SpeedMPH</remote-alias>
            <ordinal>23</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PrecipitationIn</remote-name>
            <remote-type>129</remote-type>
            <local-name>[PrecipitationIn]</local-name>
            <parent-name>[ordered_complete_data.csv]</parent-name>
            <remote-alias>PrecipitationIn</remote-alias>
            <ordinal>24</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Events</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Events]</local-name>
            <parent-name>[ordered_complete_data.csv]</parent-name>
            <remote-alias>Events</remote-alias>
            <ordinal>25</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Conditions</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Conditions]</local-name>
            <parent-name>[ordered_complete_data.csv]</parent-name>
            <remote-alias>Conditions</remote-alias>
            <ordinal>26</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>WindDirDegrees</remote-name>
            <remote-type>20</remote-type>
            <local-name>[WindDirDegrees]</local-name>
            <parent-name>[ordered_complete_data.csv]</parent-name>
            <remote-alias>WindDirDegrees</remote-alias>
            <ordinal>27</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>DateUTC</remote-name>
            <remote-type>135</remote-type>
            <local-name>[DateUTC]</local-name>
            <parent-name>[ordered_complete_data.csv]</parent-name>
            <remote-alias>DateUTC</remote-alias>
            <ordinal>28</ordinal>
            <local-type>datetime</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;datetime&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[ordered_complete_data.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Building ID' datatype='integer' name='[BuildingID]' role='dimension' type='ordinal' />
      <column datatype='real' default-format='p0.00%' name='[Calculation1]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='RUNNING_SUM(COUNTD([meternumb])) / TOTAL(COUNTD([meternumb]))'>
          <table-calc ordering-field='[federated.1efcubg0qqmu4916bf4m60c3bct6].[meternumb]' ordering-type='Field' />
        </calculation>
      </column>
      <column datatype='string' name='[Conditions]' role='dimension' type='nominal' />
      <column caption='Consumption (bin)' datatype='integer' name='[Consumption (bin)]' role='dimension' type='ordinal'>
        <calculation class='bin' decimals='3' formula='[Consumption]' peg='0' size='1000' />
      </column>
      <column datatype='integer' name='[Consumption]' role='measure' type='quantitative' />
      <column caption='Date UTC' datatype='datetime' name='[DateUTC]' role='dimension' type='ordinal' />
      <column caption='Dew PointF' datatype='real' name='[Dew_PointF]' role='measure' type='quantitative' />
      <column caption='Gust SpeedMPH' datatype='real' name='[Gust_SpeedMPH]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Precipitation In' datatype='string' name='[PrecipitationIn]' role='dimension' type='nominal' />
      <column caption='Sea Level PressureIn' datatype='real' name='[Sea_Level_PressureIn]' role='measure' type='quantitative' />
      <column caption='Temperature F' datatype='real' name='[TemperatureF]' role='measure' type='quantitative' />
      <column caption='Visibility MPH' datatype='real' name='[VisibilityMPH]' role='measure' type='quantitative' />
      <column aggregation='Sum' datatype='integer' name='[Weekday]' role='dimension' type='ordinal' />
      <column caption='Wind Dir Degrees' datatype='integer' name='[WindDirDegrees]' role='measure' type='quantitative' />
      <column caption='Wind Direction' datatype='string' name='[Wind_Direction]' role='dimension' type='nominal' />
      <column caption='Wind SpeedMPH' datatype='real' name='[Wind_SpeedMPH]' role='measure' type='quantitative' />
      <column aggregation='Sum' caption='Area Floor. M.Sqr' datatype='integer' name='[area_floor._m.sqr]' role='dimension' type='ordinal' />
      <column caption='Base Hour Flag' datatype='boolean' name='[baseHourFlag]' role='dimension' type='nominal' />
      <column caption='Building' datatype='string' name='[building]' role='dimension' type='nominal' />
      <column caption='Date' datatype='date' name='[date]' role='dimension' type='ordinal' />
      <column caption='Hour' datatype='integer' name='[hour]' role='measure' type='quantitative' />
      <column aggregation='Sum' caption='Is Holiday' datatype='integer' name='[isHoliday]' role='dimension' type='ordinal' />
      <column aggregation='Sum' caption='Meternumb' datatype='integer' name='[meternumb]' role='dimension' type='ordinal' />
      <column caption='Month' datatype='integer' name='[month]' role='dimension' type='quantitative' />
      <column caption='Norm Consumption' datatype='real' name='[norm_consumption]' role='measure' type='quantitative' />
      <column caption='Type' datatype='string' name='[type]' role='dimension' type='nominal' />
      <column caption='Week Of Day' datatype='integer' name='[weekOfDay]' role='dimension' type='quantitative' />
      <column-instance column='[Consumption]' derivation='Avg' name='[avg:Consumption:qk]' pivot='key' type='quantitative' />
      <column-instance column='[TemperatureF]' derivation='Avg' name='[avg:TemperatureF:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Conditions]' derivation='CountD' name='[ctd:Conditions:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Conditions]' derivation='CountD' name='[cum:ctd:Conditions:qk:1]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-field='' ordering-type='Field' type='CumTotal' />
      </column-instance>
      <column-instance column='[Conditions]' derivation='CountD' name='[cum:ctd:Conditions:qk:2]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-field='[federated.1efcubg0qqmu4916bf4m60c3bct6].[Conditions]' ordering-type='Field' type='CumTotal' />
      </column-instance>
      <column-instance column='[Conditions]' derivation='CountD' name='[cum:ctd:Conditions:qk]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='Rows' type='CumTotal' />
      </column-instance>
      <column-instance column='[Conditions]' derivation='CountD' name='[diff:ctd:Conditions:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='Difference'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Conditions]' derivation='CountD' name='[diff:cum:ctd:Conditions:qk:1]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-field='[federated.1efcubg0qqmu4916bf4m60c3bct6].[Conditions]' ordering-type='Field' type='CumTotal' />
        <table-calc diff-options='Relative' ordering-field='' ordering-type='Field' type='Difference'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Conditions]' derivation='CountD' name='[diff:cum:ctd:Conditions:qk:2]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-field='[federated.1efcubg0qqmu4916bf4m60c3bct6].[Conditions]' ordering-type='Field' type='CumTotal' />
        <table-calc diff-options='Relative' ordering-field='[federated.1efcubg0qqmu4916bf4m60c3bct6].[Conditions]' ordering-type='Field' type='Difference'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Conditions]' derivation='CountD' name='[diff:cum:ctd:Conditions:qk]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-field='[federated.1efcubg0qqmu4916bf4m60c3bct6].[Conditions]' ordering-type='Field' type='CumTotal' />
        <table-calc diff-options='Relative' ordering-type='Rows' type='Difference'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Conditions]' derivation='None' name='[none:Conditions:nk]' pivot='key' type='nominal' />
      <column-instance column='[building]' derivation='None' name='[none:building:nk]' pivot='key' type='nominal' />
      <column-instance column='[type]' derivation='None' name='[none:type:nk]' pivot='key' type='nominal' />
      <column-instance column='[Conditions]' derivation='CountD' name='[pcto:cum:ctd:Conditions:qk:1]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-field='[federated.1efcubg0qqmu4916bf4m60c3bct6].[Conditions]' ordering-type='Field' type='CumTotal' />
        <table-calc ordering-field='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:Conditions:nk]' ordering-type='Field' type='PctTotal' />
      </column-instance>
      <column-instance column='[Conditions]' derivation='CountD' name='[pcto:cum:ctd:Conditions:qk]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-field='[federated.1efcubg0qqmu4916bf4m60c3bct6].[Conditions]' ordering-type='Field' type='CumTotal' />
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <layout dim-ordering='alphabetic' dim-percentage='0.555725' measure-ordering='alphabetic' measure-percentage='0.444275' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:Conditions:nk]' palette='blue_teal_10_0' type='palette'>
            <map to='#2c5985'>
              <bucket>&quot;Unknown&quot;</bucket>
            </map>
            <map to='#2d5d88'>
              <bucket>&quot;Thunderstorms and Rain&quot;</bucket>
            </map>
            <map to='#2e618c'>
              <bucket>&quot;Snow Showers&quot;</bucket>
            </map>
            <map to='#2f658f'>
              <bucket>&quot;Snow&quot;</bucket>
            </map>
            <map to='#306a93'>
              <bucket>&quot;Smoke&quot;</bucket>
            </map>
            <map to='#316e96'>
              <bucket>&quot;Shallow Fog&quot;</bucket>
            </map>
            <map to='#327399'>
              <bucket>&quot;Scattered Clouds&quot;</bucket>
            </map>
            <map to='#33789c'>
              <bucket>&quot;Rain Showers&quot;</bucket>
            </map>
            <map to='#347da0'>
              <bucket>&quot;Rain&quot;</bucket>
            </map>
            <map to='#3481a3'>
              <bucket>&quot;Patches of Fog&quot;</bucket>
            </map>
            <map to='#3586a7'>
              <bucket>&quot;Partly Cloudy&quot;</bucket>
            </map>
            <map to='#358aaa'>
              <bucket>&quot;Overcast&quot;</bucket>
            </map>
            <map to='#368fae'>
              <bucket>&quot;Mostly Cloudy&quot;</bucket>
            </map>
            <map to='#3993b0'>
              <bucket>&quot;Mist&quot;</bucket>
            </map>
            <map to='#3d98b3'>
              <bucket>&quot;Light Thunderstorms and Rain&quot;</bucket>
            </map>
            <map to='#419db6'>
              <bucket>&quot;Light Snow Showers&quot;</bucket>
            </map>
            <map to='#45a2b9'>
              <bucket>&quot;Light Snow Grains&quot;</bucket>
            </map>
            <map to='#4da6bb'>
              <bucket>&quot;Light Snow&quot;</bucket>
            </map>
            <map to='#55aabd'>
              <bucket>&quot;Light Rain Showers&quot;</bucket>
            </map>
            <map to='#5daebf'>
              <bucket>&quot;Light Rain&quot;</bucket>
            </map>
            <map to='#65b3c2'>
              <bucket>&quot;Light Ice Pellets&quot;</bucket>
            </map>
            <map to='#6cb7c4'>
              <bucket>&quot;Light Ice Crystals&quot;</bucket>
            </map>
            <map to='#73bbc6'>
              <bucket>&quot;Light Freezing Rain&quot;</bucket>
            </map>
            <map to='#7abfc8'>
              <bucket>&quot;Light Freezing Fog&quot;</bucket>
            </map>
            <map to='#81c3cb'>
              <bucket>&quot;Light Freezing Drizzle&quot;</bucket>
            </map>
            <map to='#88c7cc'>
              <bucket>&quot;Light Drizzle&quot;</bucket>
            </map>
            <map to='#8fcbce'>
              <bucket>&quot;Heavy Rain Showers&quot;</bucket>
            </map>
            <map to='#96cfcf'>
              <bucket>&quot;Heavy Rain&quot;</bucket>
            </map>
            <map to='#9dd3d1'>
              <bucket>&quot;Heavy Drizzle&quot;</bucket>
            </map>
            <map to='#a4d7d2'>
              <bucket>&quot;Freezing Rain&quot;</bucket>
            </map>
            <map to='#acdbd4'>
              <bucket>&quot;Fog&quot;</bucket>
            </map>
            <map to='#b4dfd6'>
              <bucket>&quot;Drizzle&quot;</bucket>
            </map>
            <map to='#bce4d8'>
              <bucket>&quot;Clear&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[diff:cum:ctd:Conditions:qk:1]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Light Snow Showers&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Snow Showers&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Clear&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Light Freezing Drizzle&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Scattered Clouds&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Smoke&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Light Drizzle&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Unknown&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Fog&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Thunderstorms and Rain&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Light Ice Crystals&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Light Snow&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Shallow Fog&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mist&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mostly Cloudy&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Light Freezing Fog&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Light Ice Pellets&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Light Rain&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Patches of Fog&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Light Snow Grains&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Freezing Rain&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Light Freezing Rain&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Light Thunderstorms and Rain&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Rain&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Heavy Rain&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Light Rain Showers&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Overcast&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Rain Showers&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Snow&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Drizzle&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Heavy Rain Showers&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Heavy Drizzle&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Partly Cloudy&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[diff:cum:ctd:Conditions:qk:2]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Light Snow Showers&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Snow Showers&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Clear&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Light Freezing Drizzle&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Scattered Clouds&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Smoke&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Light Drizzle&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Unknown&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Fog&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Thunderstorms and Rain&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Light Ice Crystals&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Light Snow&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Shallow Fog&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mist&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mostly Cloudy&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Light Freezing Fog&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Light Ice Pellets&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Light Rain&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Patches of Fog&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Light Snow Grains&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Freezing Rain&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Light Freezing Rain&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Light Thunderstorms and Rain&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Rain&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Heavy Rain&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Light Rain Showers&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Overcast&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Rain Showers&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Snow&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Drizzle&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Heavy Rain Showers&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Heavy Drizzle&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Partly Cloudy&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[usr:Calculation5:qk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Light Snow Showers&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Snow Showers&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Clear&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Light Freezing Drizzle&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Scattered Clouds&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Smoke&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Light Drizzle&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Unknown&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Fog&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Thunderstorms and Rain&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Light Ice Crystals&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Light Snow&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Shallow Fog&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mist&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mostly Cloudy&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Light Freezing Fog&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Light Ice Pellets&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Light Rain&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Patches of Fog&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Light Snow Grains&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Freezing Rain&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Light Freezing Rain&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Light Thunderstorms and Rain&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Rain&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Heavy Rain&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Light Rain Showers&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Overcast&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Rain Showers&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Snow&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Drizzle&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Heavy Rain Showers&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Heavy Drizzle&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Partly Cloudy&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[pcto:cum:ctd:Conditions:qk:1]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Light Snow Showers&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Snow Showers&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Clear&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Light Freezing Drizzle&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Scattered Clouds&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Smoke&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Light Drizzle&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Unknown&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Fog&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Thunderstorms and Rain&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Light Ice Crystals&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Light Snow&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Shallow Fog&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mist&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mostly Cloudy&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Light Freezing Fog&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Light Ice Pellets&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Light Rain&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Patches of Fog&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Light Snow Grains&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Freezing Rain&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Light Freezing Rain&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Light Thunderstorms and Rain&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Rain&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Heavy Rain&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Light Rain Showers&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Overcast&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Rain Showers&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Snow&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Drizzle&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Heavy Rain Showers&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Heavy Drizzle&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Partly Cloudy&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[ctd:Conditions:qk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Light Snow Showers&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Snow Showers&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Clear&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Light Freezing Drizzle&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Scattered Clouds&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Smoke&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Light Drizzle&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Unknown&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Fog&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Thunderstorms and Rain&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Light Ice Crystals&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Light Snow&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Shallow Fog&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mist&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mostly Cloudy&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Light Freezing Fog&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Light Ice Pellets&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Light Rain&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Patches of Fog&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Light Snow Grains&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Freezing Rain&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Light Freezing Rain&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Light Thunderstorms and Rain&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Rain&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Heavy Rain&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Light Rain Showers&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Overcast&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Rain Showers&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Snow&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Drizzle&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Heavy Rain Showers&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Heavy Drizzle&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Partly Cloudy&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[diff:ctd:Conditions:qk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Light Snow Showers&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Snow Showers&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Clear&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Light Freezing Drizzle&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Scattered Clouds&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Smoke&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Light Drizzle&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Unknown&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Fog&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Thunderstorms and Rain&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Light Ice Crystals&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Light Snow&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Shallow Fog&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mist&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mostly Cloudy&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Light Freezing Fog&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Light Ice Pellets&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Light Rain&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Patches of Fog&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Light Snow Grains&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Freezing Rain&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Light Freezing Rain&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Light Thunderstorms and Rain&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Rain&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Heavy Rain&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Light Rain Showers&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Overcast&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Rain Showers&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Snow&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Drizzle&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Heavy Rain Showers&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Heavy Drizzle&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Partly Cloudy&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[cum:ctd:Conditions:qk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Light Snow Showers&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Snow Showers&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Clear&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Light Freezing Drizzle&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Scattered Clouds&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Smoke&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Light Drizzle&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Unknown&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Fog&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Thunderstorms and Rain&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Light Ice Crystals&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Light Snow&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Shallow Fog&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mist&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mostly Cloudy&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Light Freezing Fog&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Light Ice Pellets&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Light Rain&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Patches of Fog&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Light Snow Grains&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Freezing Rain&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Light Freezing Rain&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Light Thunderstorms and Rain&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Rain&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Heavy Rain&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Light Rain Showers&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Overcast&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Rain Showers&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Snow&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Drizzle&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Heavy Rain Showers&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Heavy Drizzle&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Partly Cloudy&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[cum:ctd:Conditions:qk:1]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Light Snow Showers&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Snow Showers&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Clear&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Light Freezing Drizzle&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Scattered Clouds&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Smoke&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Light Drizzle&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Unknown&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Fog&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Thunderstorms and Rain&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Light Ice Crystals&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Light Snow&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Shallow Fog&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mist&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mostly Cloudy&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Light Freezing Fog&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Light Ice Pellets&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Light Rain&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Patches of Fog&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Light Snow Grains&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Freezing Rain&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Light Freezing Rain&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Light Thunderstorms and Rain&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Rain&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Heavy Rain&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Light Rain Showers&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Overcast&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Rain Showers&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Snow&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Drizzle&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Heavy Rain Showers&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Heavy Drizzle&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Partly Cloudy&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[cum:ctd:Conditions:qk:2]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Light Snow Showers&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Snow Showers&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Clear&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Light Freezing Drizzle&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Scattered Clouds&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Smoke&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Light Drizzle&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Unknown&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Fog&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Thunderstorms and Rain&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Light Ice Crystals&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Light Snow&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Shallow Fog&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mist&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mostly Cloudy&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Light Freezing Fog&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Light Ice Pellets&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Light Rain&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Patches of Fog&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Light Snow Grains&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Freezing Rain&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Light Freezing Rain&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Light Thunderstorms and Rain&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Rain&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Heavy Rain&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Light Rain Showers&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Overcast&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Rain Showers&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Snow&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Drizzle&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Heavy Rain Showers&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Heavy Drizzle&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Partly Cloudy&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[diff:cum:ctd:Conditions:qk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Light Snow Showers&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Snow Showers&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Clear&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Light Freezing Drizzle&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Scattered Clouds&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Smoke&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Light Drizzle&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Unknown&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Fog&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Thunderstorms and Rain&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Light Ice Crystals&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Light Snow&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Shallow Fog&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mist&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mostly Cloudy&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Light Freezing Fog&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Light Ice Pellets&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Light Rain&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Patches of Fog&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Light Snow Grains&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Freezing Rain&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Light Freezing Rain&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Light Thunderstorms and Rain&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Rain&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Heavy Rain&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Light Rain Showers&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Overcast&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Rain Showers&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Snow&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Drizzle&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Heavy Rain Showers&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Heavy Drizzle&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Partly Cloudy&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[pcto:cum:ctd:Conditions:qk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Light Snow Showers&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Snow Showers&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Clear&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Light Freezing Drizzle&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Scattered Clouds&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Smoke&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Light Drizzle&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Unknown&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Fog&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Thunderstorms and Rain&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Light Ice Crystals&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Light Snow&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Shallow Fog&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mist&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mostly Cloudy&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Light Freezing Fog&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Light Ice Pellets&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Light Rain&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Patches of Fog&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Light Snow Grains&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Freezing Rain&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Light Freezing Rain&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Light Thunderstorms and Rain&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Rain&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Heavy Rain&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Light Rain Showers&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Overcast&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Rain Showers&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Snow&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Drizzle&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Heavy Rain Showers&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Heavy Drizzle&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Partly Cloudy&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:building:nk]' palette='blue_teal_10_0' type='palette'>
            <map to='#2c5985'>
              <bucket>&quot;Building 33&quot;</bucket>
            </map>
            <map to='#2d5d88'>
              <bucket>&quot;Building 31&quot;</bucket>
            </map>
            <map to='#2e618c'>
              <bucket>&quot;Building 30&quot;</bucket>
            </map>
            <map to='#2f668f'>
              <bucket>&quot;Building 29&quot;</bucket>
            </map>
            <map to='#306a93'>
              <bucket>&quot;Building 28&quot;</bucket>
            </map>
            <map to='#316f96'>
              <bucket>&quot;Building 27&quot;</bucket>
            </map>
            <map to='#32749a'>
              <bucket>&quot;Building 26&quot;</bucket>
            </map>
            <map to='#33799d'>
              <bucket>&quot;Building 25&quot;</bucket>
            </map>
            <map to='#347ea0'>
              <bucket>&quot;Building 24&quot;</bucket>
            </map>
            <map to='#3482a4'>
              <bucket>&quot;Building 23&quot;</bucket>
            </map>
            <map to='#3587a8'>
              <bucket>&quot;Building 22&quot;</bucket>
            </map>
            <map to='#358cab'>
              <bucket>&quot;Building 21&quot;</bucket>
            </map>
            <map to='#3790af'>
              <bucket>&quot;Building 20&quot;</bucket>
            </map>
            <map to='#3b95b1'>
              <bucket>&quot;Building 19&quot;</bucket>
            </map>
            <map to='#3f9ab4'>
              <bucket>&quot;Building 18&quot;</bucket>
            </map>
            <map to='#439fb7'>
              <bucket>&quot;Building 17&quot;</bucket>
            </map>
            <map to='#45a2b9'>
              <bucket>&quot;Building 1&quot;</bucket>
            </map>
            <map to='#49a4ba'>
              <bucket>&quot;Building 16&quot;</bucket>
            </map>
            <map to='#51a8bc'>
              <bucket>&quot;Building 15&quot;</bucket>
            </map>
            <map to='#59acbe'>
              <bucket>&quot;Building 14&quot;</bucket>
            </map>
            <map to='#61b1c1'>
              <bucket>&quot;Building 13&quot;</bucket>
            </map>
            <map to='#69b5c3'>
              <bucket>&quot;Building 12&quot;</bucket>
            </map>
            <map to='#70b9c5'>
              <bucket>&quot;Building 11&quot;</bucket>
            </map>
            <map to='#77bdc8'>
              <bucket>&quot;Building 10&quot;</bucket>
            </map>
            <map to='#7fc1ca'>
              <bucket>&quot;Building 9&quot;</bucket>
            </map>
            <map to='#86c6cc'>
              <bucket>&quot;Building 8&quot;</bucket>
            </map>
            <map to='#8dcacd'>
              <bucket>&quot;Building 7&quot;</bucket>
            </map>
            <map to='#94cecf'>
              <bucket>&quot;Building 6&quot;</bucket>
            </map>
            <map to='#9cd2d0'>
              <bucket>&quot;Building 5&quot;</bucket>
            </map>
            <map to='#a4d6d2'>
              <bucket>&quot;Building 4&quot;</bucket>
            </map>
            <map to='#acdbd4'>
              <bucket>&quot;Building 3&quot;</bucket>
            </map>
            <map to='#b4dfd6'>
              <bucket>&quot;Building 2&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:type:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;Dist_Heating&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;elect&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1efcubg0qqmu4916bf4m60c3bct6].[avg:Consumption:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1efcubg0qqmu4916bf4m60c3bct6].[avg:TemperatureF:qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='shape' field='[none:building:nk]' type='shape'>
            <map to='asterisk'>
              <bucket>&quot;Building 17&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Building 8&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Building 14&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Building 21&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Building 24&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Building 10&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Building 12&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Building 18&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Building 13&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='Bar Chart'>
      <layout-options>
        <title>
          <formatted-text>
            <run>% of total consumption of each building based on meter type </run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='ordered_complete_data' name='federated.1efcubg0qqmu4916bf4m60c3bct6' />
          </datasources>
          <datasource-dependencies datasource='federated.1efcubg0qqmu4916bf4m60c3bct6'>
            <column datatype='integer' name='[Consumption]' role='measure' type='quantitative' />
            <column caption='Building' datatype='string' name='[building]' role='dimension' type='nominal' />
            <column-instance column='[building]' derivation='None' name='[none:building:nk]' pivot='key' type='nominal' />
            <column-instance column='[type]' derivation='None' name='[none:type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Consumption]' derivation='Sum' name='[pcto:sum:Consumption:qk:2]' pivot='key' type='quantitative'>
              <table-calc ordering-field='[federated.1efcubg0qqmu4916bf4m60c3bct6].[type]' ordering-type='Field' type='PctTotal' />
            </column-instance>
            <column caption='Type' datatype='string' name='[type]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:building:nk]' filter-group='3'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:building:nk]' member='&quot;Building 10&quot;' />
              <groupfilter function='member' level='[none:building:nk]' member='&quot;Building 13&quot;' />
              <groupfilter function='member' level='[none:building:nk]' member='&quot;Building 21&quot;' />
              <groupfilter function='member' level='[none:building:nk]' member='&quot;Building 24&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:type:nk]' filter-group='5'>
            <groupfilter function='level-members' level='[none:type:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <sort class='manual' column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:type:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;elect&quot;</bucket>
              <bucket>&quot;Dist_Heating&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <slices>
            <column>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:building:nk]</column>
            <column>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.1efcubg0qqmu4916bf4m60c3bct6].[pcto:sum:Consumption:qk:2]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:type:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#818b91' />
                <format attr='mark-transparency' value='255' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1efcubg0qqmu4916bf4m60c3bct6].[pcto:sum:Consumption:qk:2]</rows>
        <cols>([federated.1efcubg0qqmu4916bf4m60c3bct6].[none:building:nk] / [federated.1efcubg0qqmu4916bf4m60c3bct6].[none:type:nk])</cols>
      </table>
    </worksheet>
    <worksheet name='Bar Chart1'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Total Consumption for each building based on its meter type</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='ordered_complete_data' name='federated.1efcubg0qqmu4916bf4m60c3bct6' />
          </datasources>
          <datasource-dependencies datasource='federated.1efcubg0qqmu4916bf4m60c3bct6'>
            <column datatype='integer' name='[Consumption]' role='measure' type='quantitative' />
            <column caption='Building' datatype='string' name='[building]' role='dimension' type='nominal' />
            <column-instance column='[building]' derivation='None' name='[none:building:nk]' pivot='key' type='nominal' />
            <column-instance column='[type]' derivation='None' name='[none:type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Consumption]' derivation='Sum' name='[sum:Consumption:qk]' pivot='key' type='quantitative' />
            <column caption='Type' datatype='string' name='[type]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:building:nk]' filter-group='3'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:building:nk]' member='&quot;Building 10&quot;' />
              <groupfilter function='member' level='[none:building:nk]' member='&quot;Building 13&quot;' />
              <groupfilter function='member' level='[none:building:nk]' member='&quot;Building 21&quot;' />
              <groupfilter function='member' level='[none:building:nk]' member='&quot;Building 24&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:type:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:type:nk]' member='&quot;Dist_Heating&quot;' />
              <groupfilter function='member' level='[none:type:nk]' member='&quot;elect&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:type:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Dist_Heating&quot;</bucket>
              <bucket>&quot;elect&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <slices>
            <column>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:type:nk]</column>
            <column>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:building:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:type:nk]' />
              <text column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[sum:Consumption:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1efcubg0qqmu4916bf4m60c3bct6].[sum:Consumption:qk]</rows>
        <cols>([federated.1efcubg0qqmu4916bf4m60c3bct6].[none:building:nk] / [federated.1efcubg0qqmu4916bf4m60c3bct6].[none:type:nk])</cols>
      </table>
    </worksheet>
    <worksheet name='Cycle Chart'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Quarter Average Consumption for each month</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='ordered_complete_data' name='federated.1efcubg0qqmu4916bf4m60c3bct6' />
          </datasources>
          <datasource-dependencies datasource='federated.1efcubg0qqmu4916bf4m60c3bct6'>
            <column-instance column='[norm_consumption]' derivation='Avg' name='[avg:norm_consumption:qk]' pivot='key' type='quantitative' />
            <column caption='Date' datatype='date' name='[date]' role='dimension' type='ordinal' />
            <column-instance column='[date]' derivation='Month' name='[mn:date:ok]' pivot='key' type='ordinal' />
            <column caption='Norm Consumption' datatype='real' name='[norm_consumption]' role='measure' type='quantitative' />
            <column-instance column='[date]' derivation='Quarter' name='[qr:date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.1efcubg0qqmu4916bf4m60c3bct6].[avg:norm_consumption:qk]' scope='rows' value='Avg. Norm Consumption (KwH/Hr)' />
            <format attr='subtitle' class='0' field='[federated.1efcubg0qqmu4916bf4m60c3bct6].[avg:norm_consumption:qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[federated.1efcubg0qqmu4916bf4m60c3bct6].[avg:norm_consumption:qk]' scope='rows' value='true' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='height' value='468' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
            <format attr='line-pattern' id='refline0' value='dashed' />
            <format attr='stroke-size' id='refline0' value='3' />
          </style-rule>
        </style>
        <panes>
          <pane id='2'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <reference-line axis-column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[avg:norm_consumption:qk]' enable-instant-analytics='true' formula='average' id='refline0' label-type='none' probability='95' scope='per-pane' value-column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[avg:norm_consumption:qk]' z-order='1' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='false' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1efcubg0qqmu4916bf4m60c3bct6].[avg:norm_consumption:qk]</rows>
        <cols>([federated.1efcubg0qqmu4916bf4m60c3bct6].[qr:date:ok] / [federated.1efcubg0qqmu4916bf4m60c3bct6].[mn:date:ok])</cols>
        <show-full-range>
          <column>[federated.1efcubg0qqmu4916bf4m60c3bct6].[Consumption (bin)]</column>
        </show-full-range>
      </table>
    </worksheet>
    <worksheet name='Line Chart'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Total Consumption for each building for each quarter</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='ordered_complete_data' name='federated.1efcubg0qqmu4916bf4m60c3bct6' />
          </datasources>
          <datasource-dependencies datasource='federated.1efcubg0qqmu4916bf4m60c3bct6'>
            <column datatype='integer' name='[Consumption]' role='measure' type='quantitative' />
            <column caption='Building' datatype='string' name='[building]' role='dimension' type='nominal' />
            <column caption='Date' datatype='date' name='[date]' role='dimension' type='ordinal' />
            <column-instance column='[building]' derivation='None' name='[none:building:nk]' pivot='key' type='nominal' />
            <column-instance column='[type]' derivation='None' name='[none:type:nk]' pivot='key' type='nominal' />
            <column-instance column='[date]' derivation='Quarter' name='[qr:date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Consumption]' derivation='Sum' name='[sum:Consumption:qk]' pivot='key' type='quantitative' />
            <column caption='Type' datatype='string' name='[type]' role='dimension' type='nominal' />
            <column-instance column='[date]' derivation='Year' name='[yr:date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:building:nk]' filter-group='3'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:building:nk]' member='&quot;Building 10&quot;' />
              <groupfilter function='member' level='[none:building:nk]' member='&quot;Building 13&quot;' />
              <groupfilter function='member' level='[none:building:nk]' member='&quot;Building 21&quot;' />
              <groupfilter function='member' level='[none:building:nk]' member='&quot;Building 24&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:type:nk]' filter-group='5'>
            <groupfilter function='level-members' level='[none:type:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:building:nk]</column>
            <column>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:type:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1efcubg0qqmu4916bf4m60c3bct6].[sum:Consumption:qk]</rows>
        <cols>([federated.1efcubg0qqmu4916bf4m60c3bct6].[none:building:nk] / ([federated.1efcubg0qqmu4916bf4m60c3bct6].[yr:date:ok] / [federated.1efcubg0qqmu4916bf4m60c3bct6].[qr:date:ok]))</cols>
      </table>
    </worksheet>
    <worksheet name='NormConsumption'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Normalised Consumption for all the buildings in increasing order</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='ordered_complete_data' name='federated.1efcubg0qqmu4916bf4m60c3bct6' />
          </datasources>
          <datasource-dependencies datasource='federated.1efcubg0qqmu4916bf4m60c3bct6'>
            <column caption='Building' datatype='string' name='[building]' role='dimension' type='nominal' />
            <column-instance column='[building]' derivation='None' name='[none:building:nk]' pivot='key' type='nominal' />
            <column caption='Norm Consumption' datatype='real' name='[norm_consumption]' role='measure' type='quantitative' />
            <column-instance column='[norm_consumption]' derivation='Sum' name='[sum:norm_consumption:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <sort class='manual' column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:building:nk]' direction='ASC'>
            <dictionary>
              <bucket>%all%</bucket>
              <bucket>&quot;Building 27&quot;</bucket>
              <bucket>&quot;Building 19&quot;</bucket>
              <bucket>&quot;Building 3&quot;</bucket>
              <bucket>&quot;Building 33&quot;</bucket>
              <bucket>&quot;Building 31&quot;</bucket>
              <bucket>&quot;Building 11&quot;</bucket>
              <bucket>&quot;Building 22&quot;</bucket>
              <bucket>&quot;Building 6&quot;</bucket>
              <bucket>&quot;Building 13&quot;</bucket>
              <bucket>&quot;Building 8&quot;</bucket>
              <bucket>&quot;Building 15&quot;</bucket>
              <bucket>&quot;Building 17&quot;</bucket>
              <bucket>&quot;Building 14&quot;</bucket>
              <bucket>&quot;Building 23&quot;</bucket>
              <bucket>&quot;Building 25&quot;</bucket>
              <bucket>&quot;Building 21&quot;</bucket>
              <bucket>&quot;Building 18&quot;</bucket>
              <bucket>&quot;Building 2&quot;</bucket>
              <bucket>&quot;Building 16&quot;</bucket>
              <bucket>&quot;Building 30&quot;</bucket>
              <bucket>&quot;Building 10&quot;</bucket>
              <bucket>&quot;Building 26&quot;</bucket>
              <bucket>&quot;Building 9&quot;</bucket>
              <bucket>&quot;Building 4&quot;</bucket>
              <bucket>&quot;Building 7&quot;</bucket>
              <bucket>&quot;Building 28&quot;</bucket>
              <bucket>&quot;Building 24&quot;</bucket>
              <bucket>&quot;Building 20&quot;</bucket>
              <bucket>&quot;Building 5&quot;</bucket>
              <bucket>&quot;Building 29&quot;</bucket>
              <bucket>&quot;Building 12&quot;</bucket>
              <bucket>&quot;Building 1&quot;</bucket>
            </dictionary>
          </sort>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <text column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[sum:norm_consumption:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1efcubg0qqmu4916bf4m60c3bct6].[sum:norm_consumption:qk]</rows>
        <cols>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:building:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Pareto chart'>
      <layout-options>
        <title>
          <formatted-text>
            <run>80-20 ratio of Consumption v/s Conditions</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='ordered_complete_data' name='federated.1efcubg0qqmu4916bf4m60c3bct6' />
          </datasources>
          <datasource-dependencies datasource='federated.1efcubg0qqmu4916bf4m60c3bct6'>
            <column datatype='string' name='[Conditions]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Consumption]' role='measure' type='quantitative' />
            <column-instance column='[Conditions]' derivation='None' name='[none:Conditions:nk]' pivot='key' type='nominal' />
            <column-instance column='[Conditions]' derivation='CountD' name='[pcto:cum:ctd:Conditions:qk:1]' pivot='key' type='quantitative'>
              <table-calc aggregation='Sum' ordering-field='[federated.1efcubg0qqmu4916bf4m60c3bct6].[Conditions]' ordering-type='Field' type='CumTotal' />
              <table-calc ordering-field='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:Conditions:nk]' ordering-type='Field' type='PctTotal' />
            </column-instance>
            <column-instance column='[Consumption]' derivation='Sum' name='[pcto:cum:sum:Consumption:qk:5]' pivot='key' type='quantitative'>
              <table-calc aggregation='Sum' ordering-field='[federated.1efcubg0qqmu4916bf4m60c3bct6].[Conditions]' ordering-type='Field' type='CumTotal' />
              <table-calc ordering-field='[federated.1efcubg0qqmu4916bf4m60c3bct6].[Conditions]' ordering-type='Field' type='PctTotal' />
            </column-instance>
            <column-instance column='[Consumption]' derivation='Sum' name='[sum:Consumption:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <sort class='computed' column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:Conditions:nk]' direction='DESC' using='[federated.1efcubg0qqmu4916bf4m60c3bct6].[sum:Consumption:qk]' />
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' center='0.20000000000000001' field='[federated.1efcubg0qqmu4916bf4m60c3bct6].[pcto:cum:ctd:Conditions:qk:1]' palette='red_blue_diverging_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
            <format attr='fill-above' id='refline1' value='#00000000' />
            <format attr='fill-below' id='refline1' value='#00000000' />
            <format attr='stroke-size' id='refline0' value='2' />
            <format attr='stroke-size' id='refline1' value='2' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[pcto:cum:ctd:Conditions:qk:1]' />
              <lod column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:Conditions:nk]' />
            </encodings>
            <reference-line axis-column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[pcto:cum:sum:Consumption:qk:5]' enable-instant-analytics='true' formula='constant' id='refline0' label-type='none' scope='per-pane' value='0.80000000000000004' value-column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[pcto:cum:sum:Consumption:qk:5]' z-order='1' />
            <reference-line axis-column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[pcto:cum:ctd:Conditions:qk:1]' enable-instant-analytics='true' formula='constant' id='refline1' label-type='automatic' scope='per-pane' value='0.20000000000000001' value-column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[pcto:cum:ctd:Conditions:qk:1]' z-order='2' />
          </pane>
        </panes>
        <rows>[federated.1efcubg0qqmu4916bf4m60c3bct6].[pcto:cum:sum:Consumption:qk:5]</rows>
        <cols>[federated.1efcubg0qqmu4916bf4m60c3bct6].[pcto:cum:ctd:Conditions:qk:1]</cols>
      </table>
    </worksheet>
    <worksheet name='Pie Chart'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Temperature Vs Conditions &amp; Dew Point</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='ordered_complete_data' name='federated.1efcubg0qqmu4916bf4m60c3bct6' />
          </datasources>
          <datasource-dependencies datasource='federated.1efcubg0qqmu4916bf4m60c3bct6'>
            <column datatype='string' name='[Conditions]' role='dimension' type='nominal' />
            <column caption='Dew PointF' datatype='real' name='[Dew_PointF]' role='measure' type='quantitative' />
            <column caption='Temperature F' datatype='real' name='[TemperatureF]' role='measure' type='quantitative' />
            <column-instance column='[Dew_PointF]' derivation='Median' name='[med:Dew_PointF:qk]' pivot='key' type='quantitative' />
            <column-instance column='[TemperatureF]' derivation='Median' name='[med:TemperatureF:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Conditions]' derivation='None' name='[none:Conditions:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <color column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:Conditions:nk]' />
              <tooltip column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[med:Dew_PointF:qk]' />
              <tooltip column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[med:TemperatureF:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
    </worksheet>
    <worksheet name='PieChartConsmp'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Normalised Consumption</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='ordered_complete_data' name='federated.1efcubg0qqmu4916bf4m60c3bct6' />
          </datasources>
          <datasource-dependencies datasource='federated.1efcubg0qqmu4916bf4m60c3bct6'>
            <column caption='Building' datatype='string' name='[building]' role='dimension' type='nominal' />
            <column-instance column='[building]' derivation='None' name='[none:building:nk]' pivot='key' type='nominal' />
            <column-instance column='[type]' derivation='None' name='[none:type:nk]' pivot='key' type='nominal' />
            <column caption='Norm Consumption' datatype='real' name='[norm_consumption]' role='measure' type='quantitative' />
            <column-instance column='[norm_consumption]' derivation='Sum' name='[sum:norm_consumption:qk]' pivot='key' type='quantitative' />
            <column caption='Type' datatype='string' name='[type]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:building:nk]' filter-group='3'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:building:nk]' member='&quot;Building 10&quot;' />
              <groupfilter function='member' level='[none:building:nk]' member='&quot;Building 13&quot;' />
              <groupfilter function='member' level='[none:building:nk]' member='&quot;Building 21&quot;' />
              <groupfilter function='member' level='[none:building:nk]' member='&quot;Building 24&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:type:nk]' filter-group='5'>
            <groupfilter function='level-members' level='[none:type:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:building:nk]</column>
            <column>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <color column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:type:nk]' />
              <wedge-size column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[sum:norm_consumption:qk]' />
              <size column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[sum:norm_consumption:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:building:nk]</rows>
        <cols />
      </table>
    </worksheet>
    <worksheet name='Scatter Plot'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Scatter Plot - Consumption per hour for each building daily </run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='ordered_complete_data' name='federated.1efcubg0qqmu4916bf4m60c3bct6' />
          </datasources>
          <datasource-dependencies datasource='federated.1efcubg0qqmu4916bf4m60c3bct6'>
            <column datatype='integer' name='[Consumption]' role='measure' type='quantitative' />
            <column caption='Building' datatype='string' name='[building]' role='dimension' type='nominal' />
            <column caption='Date' datatype='date' name='[date]' role='dimension' type='ordinal' />
            <column-instance column='[date]' derivation='Day' name='[dy:date:ok]' pivot='key' type='ordinal' />
            <column caption='Hour' datatype='integer' name='[hour]' role='measure' type='quantitative' />
            <column-instance column='[date]' derivation='Month' name='[mn:date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Consumption]' derivation='None' name='[none:Consumption:qk]' pivot='key' type='quantitative' />
            <column-instance column='[building]' derivation='None' name='[none:building:nk]' pivot='key' type='nominal' />
            <column-instance column='[hour]' derivation='None' name='[none:hour:qk]' pivot='key' type='quantitative' />
            <column-instance column='[date]' derivation='Day-Trunc' name='[tdy:date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[dy:date:ok]'>
            <groupfilter function='member' level='[dy:date:ok]' member='1' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[mn:date:ok]'>
            <groupfilter function='member' level='[mn:date:ok]' member='1' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:building:nk]' filter-group='3'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:building:nk]' member='&quot;Building 10&quot;' />
              <groupfilter function='member' level='[none:building:nk]' member='&quot;Building 13&quot;' />
              <groupfilter function='member' level='[none:building:nk]' member='&quot;Building 21&quot;' />
              <groupfilter function='member' level='[none:building:nk]' member='&quot;Building 24&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1efcubg0qqmu4916bf4m60c3bct6].[dy:date:ok]</column>
            <column>[federated.1efcubg0qqmu4916bf4m60c3bct6].[mn:date:ok]</column>
            <column>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:building:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='2'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:Consumption:qk]</rows>
        <cols>([federated.1efcubg0qqmu4916bf4m60c3bct6].[tdy:date:ok] * [federated.1efcubg0qqmu4916bf4m60c3bct6].[none:hour:qk])</cols>
      </table>
    </worksheet>
    <worksheet name='Side by side circle'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Average Consumtion vs Average Temperature</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='ordered_complete_data' name='federated.1efcubg0qqmu4916bf4m60c3bct6' />
          </datasources>
          <datasource-dependencies datasource='federated.1efcubg0qqmu4916bf4m60c3bct6'>
            <column datatype='integer' name='[Consumption]' role='measure' type='quantitative' />
            <column caption='Temperature F' datatype='real' name='[TemperatureF]' role='measure' type='quantitative' />
            <column datatype='datetime' name='[Time]' role='dimension' type='ordinal' />
            <column-instance column='[Consumption]' derivation='Avg' name='[avg:Consumption:qk]' pivot='key' type='quantitative' />
            <column-instance column='[TemperatureF]' derivation='Avg' name='[avg:TemperatureF:qk]' pivot='key' type='quantitative' />
            <column caption='Building' datatype='string' name='[building]' role='dimension' type='nominal' />
            <column-instance column='[Time]' derivation='Month' name='[mn:Time:ok]' pivot='key' type='ordinal' />
            <column-instance column='[building]' derivation='None' name='[none:building:nk]' pivot='key' type='nominal' />
            <column-instance column='[type]' derivation='None' name='[none:type:nk]' pivot='key' type='nominal' />
            <column caption='Type' datatype='string' name='[type]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1efcubg0qqmu4916bf4m60c3bct6].[avg:Consumption:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1efcubg0qqmu4916bf4m60c3bct6].[avg:TemperatureF:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:building:nk]' filter-group='3'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:building:nk]' member='&quot;Building 10&quot;' />
              <groupfilter function='member' level='[none:building:nk]' member='&quot;Building 13&quot;' />
              <groupfilter function='member' level='[none:building:nk]' member='&quot;Building 21&quot;' />
              <groupfilter function='member' level='[none:building:nk]' member='&quot;Building 24&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:type:nk]' filter-group='5'>
            <groupfilter function='level-members' level='[none:type:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:building:nk]</column>
            <column>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:type:nk]</column>
            <column>[federated.1efcubg0qqmu4916bf4m60c3bct6].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <encodings>
              <color column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[:Measure Names]' />
              <shape column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:building:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1efcubg0qqmu4916bf4m60c3bct6].[Multiple Values]</rows>
        <cols>([federated.1efcubg0qqmu4916bf4m60c3bct6].[none:type:nk] / ([federated.1efcubg0qqmu4916bf4m60c3bct6].[mn:Time:ok] / [federated.1efcubg0qqmu4916bf4m60c3bct6].[:Measure Names]))</cols>
      </table>
    </worksheet>
    <worksheet name='Stacked Bar'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Max Consumtion On each Condition</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='ordered_complete_data' name='federated.1efcubg0qqmu4916bf4m60c3bct6' />
          </datasources>
          <datasource-dependencies datasource='federated.1efcubg0qqmu4916bf4m60c3bct6'>
            <column datatype='string' name='[Conditions]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Consumption]' role='measure' type='quantitative' />
            <column caption='Building' datatype='string' name='[building]' role='dimension' type='nominal' />
            <column-instance column='[Consumption]' derivation='Max' name='[max:Consumption:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Conditions]' derivation='None' name='[none:Conditions:nk]' pivot='key' type='nominal' />
            <column-instance column='[building]' derivation='None' name='[none:building:nk]' pivot='key' type='nominal' />
            <column-instance column='[type]' derivation='None' name='[none:type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Consumption]' derivation='Sum' name='[sum:Consumption:qk]' pivot='key' type='quantitative' />
            <column caption='Type' datatype='string' name='[type]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <sort class='computed' column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:Conditions:nk]' direction='DESC' using='[federated.1efcubg0qqmu4916bf4m60c3bct6].[sum:Consumption:qk]' />
          <filter class='categorical' column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:building:nk]' filter-group='3'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:building:nk]' member='&quot;Building 10&quot;' />
              <groupfilter function='member' level='[none:building:nk]' member='&quot;Building 13&quot;' />
              <groupfilter function='member' level='[none:building:nk]' member='&quot;Building 21&quot;' />
              <groupfilter function='member' level='[none:building:nk]' member='&quot;Building 24&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:type:nk]' filter-group='5'>
            <groupfilter function='level-members' level='[none:type:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:building:nk]</column>
            <column>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:type:nk]' />
              <size column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:building:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1efcubg0qqmu4916bf4m60c3bct6].[max:Consumption:qk]</rows>
        <cols>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:Conditions:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Tree Map'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Total Consumption of each building based on meter type</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='ordered_complete_data' name='federated.1efcubg0qqmu4916bf4m60c3bct6' />
          </datasources>
          <datasource-dependencies datasource='federated.1efcubg0qqmu4916bf4m60c3bct6'>
            <column datatype='integer' name='[Consumption]' role='measure' type='quantitative' />
            <column caption='Building' datatype='string' name='[building]' role='dimension' type='nominal' />
            <column-instance column='[building]' derivation='None' name='[none:building:nk]' pivot='key' type='nominal' />
            <column-instance column='[type]' derivation='None' name='[none:type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Consumption]' derivation='Sum' name='[pcto:sum:Consumption:qk:4]' pivot='key' type='quantitative'>
              <table-calc ordering-field='[federated.1efcubg0qqmu4916bf4m60c3bct6].[building]' ordering-type='Field' type='PctTotal' />
            </column-instance>
            <column caption='Type' datatype='string' name='[type]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane>
            <view>
              <breakdown value='on' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <size column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[pcto:sum:Consumption:qk:4]' />
              <color column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[pcto:sum:Consumption:qk:4]' />
              <text column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:type:nk]' />
              <text column='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:building:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='2nd'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <datasources>
        <datasource caption='ordered_complete_data' name='federated.1efcubg0qqmu4916bf4m60c3bct6' />
      </datasources>
      <datasource-dependencies datasource='federated.1efcubg0qqmu4916bf4m60c3bct6'>
        <column caption='Building' datatype='string' name='[building]' role='dimension' type='nominal' />
        <column-instance column='[building]' derivation='None' name='[none:building:nk]' pivot='key' type='nominal' />
        <column-instance column='[type]' derivation='None' name='[none:type:nk]' pivot='key' type='nominal' />
        <column caption='Type' datatype='string' name='[type]' role='dimension' type='nominal' />
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='5' param='horz' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='100000' id='3' type='layout-basic' w='84000' x='0' y='0'>
              <zone h='50000' id='1' name='Line Chart' w='42000' x='0' y='0' />
              <zone h='50000' id='9' name='Bar Chart' w='42000' x='0' y='50000' />
              <zone h='50000' id='11' name='Stacked Bar' w='42000' x='42000' y='0' />
              <zone h='50000' id='12' name='PieChartConsmp' w='42000' x='42000' y='50000' />
            </zone>
            <zone fixed-size='160' h='100000' id='4' is-fixed='true' param='vert' type='layout-flow' w='16000' x='84000' y='0'>
              <zone h='9250' id='6' mode='checkdropdown' name='Line Chart' param='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:building:nk]' type='filter' w='16000' x='84000' y='0' />
              <zone h='10500' id='7' name='Line Chart' pane-specification-id='0' param='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:type:nk]' type='color' w='16000' x='84000' y='9250' />
              <zone h='15125' id='10' name='Bar Chart' param='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:type:nk]' type='filter' w='16000' x='84000' y='19750' />
              <zone h='16750' id='14' name='PieChartConsmp' pane-specification-id='0' param='[federated.1efcubg0qqmu4916bf4m60c3bct6].[sum:norm_consumption:qk]' type='size' w='16000' x='84000' y='34875' />
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
  </dashboards>
  <windows source-height='44'>
    <window class='worksheet' maximized='true' name='Bar Chart'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:type:nk]' type='filter' />
            <card mode='checkdropdown' param='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:building:nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:type:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:BuildingID:ok]</field>
            <field>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:building:nk]</field>
            <field>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:type:nk]</field>
            <field>[federated.1efcubg0qqmu4916bf4m60c3bct6].[sum:Consumption:qk]</field>
            <field>[federated.1efcubg0qqmu4916bf4m60c3bct6].[yr:date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Tree Map'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1efcubg0qqmu4916bf4m60c3bct6].[pcto:sum:Consumption:qk:4]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:building:nk]</field>
            <field>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:type:nk]</field>
            <field>[federated.1efcubg0qqmu4916bf4m60c3bct6].[pcto:sum:Consumption:qk:4]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Pareto chart'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1efcubg0qqmu4916bf4m60c3bct6].[pcto:cum:ctd:Conditions:qk:1]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <selection-collection>
          <node-selection select-tuples='false'>
            <oriented-node-reference orientation='horizontal'>
              <node-reference>
                <axis>[federated.1efcubg0qqmu4916bf4m60c3bct6].[pcto:cum:ctd:Conditions:qk:1]</axis>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
          </node-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:area_floor._m.sqr:ok]</field>
            <field>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:meternumb:ok]</field>
            <field>[federated.1efcubg0qqmu4916bf4m60c3bct6].[pcto:cum:ctd:Conditions:qk:1]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Cycle Chart'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='8'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1efcubg0qqmu4916bf4m60c3bct6].[mn:date:ok]</field>
            <field>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:Consumption (bin):ok]</field>
            <field>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:area_floor._m.sqr:ok]</field>
            <field>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:baseHourFlag:nk]</field>
            <field>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:building:nk]</field>
            <field>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:month:qk]</field>
            <field>[federated.1efcubg0qqmu4916bf4m60c3bct6].[yr:date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Scatter Plot'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='dropdown' param='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:building:nk]' type='filter' />
            <card mode='dropdown' param='[federated.1efcubg0qqmu4916bf4m60c3bct6].[dy:date:ok]' type='filter' />
            <card mode='dropdown' param='[federated.1efcubg0qqmu4916bf4m60c3bct6].[mn:date:ok]' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1efcubg0qqmu4916bf4m60c3bct6].[dy:date:ok]</field>
            <field>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:building:nk]</field>
            <field>[federated.1efcubg0qqmu4916bf4m60c3bct6].[yr:date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Line Chart'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:building:nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:type:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:building:nk]</field>
            <field>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:type:nk]</field>
            <field>[federated.1efcubg0qqmu4916bf4m60c3bct6].[yr:date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='NormConsumption'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:building:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Bar Chart1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:building:nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:type:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:building:nk]</field>
            <field>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:type:nk]</field>
            <field>[federated.1efcubg0qqmu4916bf4m60c3bct6].[yr:date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='dashboard' name='2nd'>
      <viewpoints>
        <viewpoint name='Bar Chart' />
        <viewpoint name='Line Chart'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:type:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='PieChartConsmp'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Stacked Bar'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='-1' />
    </window>
    <window class='worksheet' name='Stacked Bar'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:type:nk]' type='filter' />
            <card param='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:building:nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:type:nk]' type='color' />
            <card pane-specification-id='0' param='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:building:nk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:Conditions:nk]</field>
            <field>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:building:nk]</field>
            <field>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:type:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Side by side circle'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:type:nk]' type='filter' />
            <card param='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:building:nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.1efcubg0qqmu4916bf4m60c3bct6].[:Measure Names]' type='color' />
            <card pane-specification-id='0' param='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:building:nk]' type='shape' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1efcubg0qqmu4916bf4m60c3bct6].[:Measure Names]</field>
            <field>[federated.1efcubg0qqmu4916bf4m60c3bct6].[mn:Time:ok]</field>
            <field>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:building:nk]</field>
            <field>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:type:nk]</field>
            <field>[federated.1efcubg0qqmu4916bf4m60c3bct6].[yr:Time:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Pie Chart'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:Conditions:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:Conditions:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='PieChartConsmp'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:building:nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:type:nk]' type='color' />
            <card pane-specification-id='0' param='[federated.1efcubg0qqmu4916bf4m60c3bct6].[sum:norm_consumption:qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:building:nk]</field>
            <field>[federated.1efcubg0qqmu4916bf4m60c3bct6].[none:type:nk]</field>
            <field>[federated.1efcubg0qqmu4916bf4m60c3bct6].[yr:date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='2nd' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Bar Chart' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Bar Chart1' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Cycle Chart' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Line Chart' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='NormConsumption' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABYlAAAWJQFJUiTw
      AAAgAElEQVR4nO29d3Bd153n+bkvZzzknEGAAQApkla2LDnJQW1b7iC7x+721ExN13Zvbaiu
      3q0NNVO1O7X/7FZtzezU9tZMd+8kr9uxHWVbtmzJIiVKIJEjASKHhwe8HG88+wdAUBLxLoMg
      EBLup4QSH+7Buef83v2e8Du/c64khBBYWBxTbA+6ABYWDxJLABbHGksAFscaSwAWxxpLABbH
      GksAFscaSwAWx5pDF4Cu64d9SwuLklg9gMWxxhKAxbHGEoDFscYSgMWxxhKAxbHGEoDFscYS
      gMWxxhKAxbHmvgVgaArTo9dIySA0mYmxUcYmZ9AMwdKNaYZHJpB1g631JYaGhknmlYMst4XF
      gXDfApCLRfxuyCkQW5nFU9tBhVNlI7pBNG3jVFuY6dlVFtdjnO0/zdzU5EGW28LiQHDc7x96
      AyH8HidFIFhVx8TQCDZJcK7MTzQQxh3yoU7PY/M4sNldIHR0fefH2oVpcVS4bwG8nejqGi2n
      +nCnFtlUPajxNWJrfoIN9aTWF8hn40guP3a7HWDv/xYWDxrpfjfFp2MRFteiIDk40dPN9uo8
      mjNIW1MdmXiUaEals7URpZBhfjlKd3cndpuEruuWACyODPctgPvFEoDFUcJyg1ocaywBWBxr
      LAFYHGssAVgcaywBWBxrLAFYHGssAVgcaywBWBxrLAFYHGvekwCK+Szq7jE/hVyG6HYcQwiK
      +Qzb8RRCgKYU2YxuY1gBcBZHkPsWQD4VY3TgNbbyoBcSjF9fQtdUdF1mcGiC1MY8i9EkI8PD
      qMU0Y9PzB1luC4sD4b6jQX1llXS1NVIE1ucXUIWd1dVVgvYC7up2Orp8XLu6iOT209TSQeTq
      NSsc2uLIcSDh0F6fh/qaVqpElJWkDLLAKErYfX50JQPCAMlmhUNbHDnuewiUjkW4sZZgeXYS
      X0MHubUZZtfStLZ2ErClGZ5ao7u7hbqwl8HBQVo6uw+y3BYWB4IVDm1xrLHcoBbHGksAFsca
      SwAWxxpLABbHGksAFscaSwAWxxpLABbHGksAFscaSwAWxxpLABbHmvs/HTqXZuDyy2zldz4r
      uQQvvfwauhCMDQ0w8NYAqYLC/Mw4g9cGWI0mD6rMFhYHxn1HgzrcXtobq1B0QAiuzy4SCnoR
      xS1kZy0XTvkZnlnCMHQunr/I1WtDNFY/BGCFQ1scGe5bAHaHE5skAbC9ch3VHUZJLlPM5ZGc
      HiSnE0NRkFw2kCRAYBiGtR/A4khx3wLIpeIsrUZQMkG6G6uptuXZXpFRPVWo2yOMZR3UdZwm
      tjDJ1OQY/nCNtR/A4shx3+HQmqogKyog4fF6sdskNE3D7nCgqwqqLvC43QhDo6ioeD0eJMk6
      Ht3iaGHtB7A41lhuUItjjSUAi2ONJQCLY40lAItjjakbNJeKs5VIA1BV10jA4zyUQllYHBam
      Avjbv/6/6Dj3KE4J3KFqSwAWHzpMh0AVfjcZefc0t8MqkYXFIWK6DhDf2mB9I4rTG6CpuQX/
      AfQA1jqAxVHCtAcY+t1LvDE8wY+++x3iBe2wymRhcWiYCmB6cZ1nP/NZTjcHWN3KvuOaMHQi
      KwvkVDB0jaUb15meXUA3BFsbK0xfn0c3BNnkNuMTUxRvnqNuYXGEMBXA177+NS6/9FOM2rN8
      pKvqHdcK2TTx6AqpIqjFPKGaJsqkHMuRCDdWk9SHYHoxwuTMAic6mxgfn3pfK2JhcT/s7wXS
      ZF567U3c8jbpXJ70whSLm/101Yf3kvhC5dRVhSkCbn+IwtYaCzGZCxUKsXAtZbU+Zt+cx+51
      4/YEQZOt49Etjhz7C8Dh5tPPPMWVN9/kzz7zZTYWJlGdpSfAcnqTqZU0jz1yAbQMxsIKuZgf
      b3UV+fgGqpJHcriscGiLI0fJdYCrr/2Sf/PvvsnQ4CAby/P8/n/xP9HytuvpWITlbRkjOYmz
      tgy3TWFsdJS2rlO01HhZ3FLo6WkhV2ZjamaeU6dPHUJ1LCzujZJuUFWR+d2ly5w724/L7SPg
      9yLt7gB7L1huUIujRMkewOlyo20v8s3vzJFPJviTP/+vaSjzHGbZLCzed0y9QOvbeb72jW/w
      5JkappdiaLpxWOWysDgUTFeCL//6x1xfiQECkOh75Bkunm57Tze0hkAWRwnTYDjJMDCQsEsS
      T33meTrqyg6rXBYWh4KpACavL/GFr/8TfHZwe32HVSYLi0PDVABCyfD97/w9LpvE05//Azqt
      HsDiQ4apAOx2O80nThJwQMjrOqwyWVgcGqZeoMef+RQuQ0FRFAwrfMHiQ4ipAAq5LKlUitdf
      /gWRtHxYZbKwODRMh0Aer49gUKMi5CadV2+7vuNBlZCkWwfeSpKEEAIh2F05FgghkCTpQFaS
      LSwOElMB+AJBGlx+fGW/zyPd1e+4lk/FGLr6Ou0P/x7Vtm2uDN/Ahs65ixcYHXgTh91G48lz
      bM9PoEt2vOF6TnY0vq+VsbC4V0wF8JMf/YyO9hreGpnFWdHMRzor9675yio51dVKEdhYWKPn
      /Hmc8UUiy/O4qk5w/oSPa0PLSA4vF871c/XqNYy2egzDsMKhLY4MpgJorPZxZWqL890tuN2l
      kzocNnRdYDcENqcTSdVBN5DsdkBjdzy0NwyyVoItjgqmoRDpeJT1aByAhpYOQr5brtB0LMLU
      xCiqv4mHTjYyPjaD5HBw7qFzTA0NoOhwou8hthenSBcUqhq7aKkrt0IhLI4UpgL4t//H/0bL
      hcfxSHDq3MPUht/7arAlAIujhKkbtKY6yOTENDMzM2QKymGVycLi0DAVwMXHnsTvtOEKVNFY
      HTqsMllYHBqmAvjuD37BV77xj2nzxHjrevSwymRhcWiYCuCZx/v5m7/+f3hrPk9fW6VZUguL
      DyQlJ8ELU2MEm7qp9DtZnB4l2HKaqsB7D4izJsEWR4mSPcDvXv0NRc1AstmIzI8wurB9mOWy
      sDgUSq5uPfPUI3zzb/8tDTVlrGwk+YtP1hxmuSwsDgXTdYBiPksmVyRcXo7TcTDDFmsIZHGU
      MA2FcLm9BG0OdE3FZpOw26w3Kll8uDAVwP/3N/8axVOJQ4KPPvsl2muttQCLDxfm+wFcHmra
      O/HbMX09UjEZYXh2HUlXOHn2Ia4PDyCw0X7mIbYWJihqBqHqVrpaag+8AhYW7wVTAaxubvPE
      Q35ckoTDXnr4oykybl8Ip5JCTW9gC3fshEOPLILdxcULu+HQTdUYhmFtjLE4MpgKoDro5Mpb
      1/DZIVDbRnnAvW+6oqzjdjtw4EBRNSRurRdIWA+7xdHFfBJc1sDXv/wCfqcNu91kP4DTQXpz
      G0ktUt50AmN1kIEBGx2959man2Dw2ltU1LVjs9kQQmCzJtMWRwRTN+ivv/+3/HZimzNdzTz+
      yedoq3nvk2DLDWpxlDAVQCGfZWlhAV95DfU11Tgd773ltgRgcZQwfaJ//vd/x+DsEt/+2/+b
      hVj+sMpkYXFomAogninQ3dVNbYWPrLUhxuJDSMkhkK5pFDJxXrt8hVBtG49c6MVxAJNXawhk
      cZQo6doZG3iVoellDE3hFy/+BFvoX/JYj7WQZfHhomQPIAyNq5d+w+iNDfrOP8KFvh7sNusd
      YRYfLkqOaX7wd/+KH/5ulLJggJW5Cdbj2VJJLSw+sJSeA+g6hnHrnWB2uwOb1QNYfMgoOQew
      2+3Wg2rxoceKSbA41hyQAASLc1OMTc6gagZLN2YYHplA0Q22N5YZGhomlbfWESyOHgcigOzm
      AllbmK6ONuxGmmha4lRbmKnZVRbWtjnbf5rZqcmDuJWFxYFiGg16t8SiCYo2hamRBWprKpAC
      FbhDPtTpeWweBza7C4SOru/8WMejWxwVDkQANY01xDYNGmvC5FxlaNE1Ymt+gg31pNcXyGcT
      SC7/3qTamlxbHBVMo0HvHkEsskZKsdHeXE86HmUro9LZ2oiSTzO/EuVEdxcOm2S5QS2OFAck
      gLvHEoDFUcJyg1ocaywBWBxrLAFYHGssAVgcaywBWBxrLAFYHGssAVgcaywBWBxrLAFYHGsO
      TABCGKRSaQQ7L9aIJVIIAZoqE92KYVgBcBZHkAMTQHxjid9eGsAwFIaGxkms3WAxmmRkaAg5
      n2RseuGgbmVhcWAcSDSo0Issb+Vprg0jslFc1e10dvm4dnUJye2nubWTzavXrHBoiyPHgQhg
      dXaavGIQXVmmoaESZBWjaMPu9aKrWRAGSDYrHNriyHGg0aA35m7Q3tnB7MQIWdngZF8/idUb
      RBMZmjpPURP2W9GgFkcKKxza4lhjuUEtjjWWACyONZYALI41lgAsjjUH4ga1sLgnhCCVjKNJ
      TirDIQq5NHkFKkI+oltbGAK8gRDhoP99L4olAItDJ7W5yFtTqxTWp2l77HMMvvZbqgPQ2PcM
      Ui5CcnOBxUIVf/r80+97Wawh0AcYw9CZnJoGQFdy/PZXv2RuJYoAdDnHtZHxB1vAEpTVtfP0
      o2dJFQxs2RVaTz/GJz71SRbnrnP23HkKeY3PffqJQymLJYAPMPOTI7z82psAvPijH9L76Me4
      9sqL5FXBldd+y6uvDzzgEu6PnInyH//z9/ncV75BY7kfRSmiKXnsLj9aIUpclFPtdx5KWSwB
      vO8IlpaWAMgno7zyyisMjExh6CqDb77ORixz3zl39Z6nvaESgBOttfz4hz8gZfjQ4vMkHfXU
      hz0HUoODZm1uEuEN8sarL6MF29Cik/zs1wM89thDjA+O84nPfOLQymIJ4H1m4tob/PilVwEY
      uXyJ5v6LnOlu55UXf0ywsZ2ffu87aAdwn5Hr6/zxCy9Q71d55dIQSmaDoaEhljeTB5D7wdLx
      0NP806/9Ac99/nNUh4N8/vk/5IWvvECV38m5Jz9Brf/gpqZCCNPgywO5k5JLMTW3iCKr9PT1
      szw9QkGF7r5zxJdnSGSL1DSfoKmm7CBu94HizIXHWdiIA+CrqmTi0suMu8oIO2xsrK7hKSRZ
      LULbfTTW49cuk0gk+PUrb/DUxx7jV7/4GcH6k3zs8QvYJOhoaaalNnzANTp4VqNpXE47NeV3
      9vpousHU0hadDRUIBLouUDQdXTdQNQNF01E0nYKsomoGMysxkpkCTTVlyIpGUdEoyCp5WUNW
      tYMRgMMToL+/n6WpYdLxdYrOWi6c8jM8s4ih61w8f56r14Zpqjl/ELf7wHLy3KOcdbv57re/
      xaNf/kPi0QgrU1XUuO8vv94LT9B74dZk8QvNJ95x/ezZs++luPeNEIKiouF174zjZUUjkS0S
      TxeIZwokMrv/ThdIZAvMrcXRdUHA67pj3oYQxNMFqst8eD1O7DYJl8OO3W7D6bDhcthxOey4
      XQ7cTjupXJFUTqaltoyKkBePy4HX7cDrduJxOg5GADabxMTwVZzhBlpDsJm1IzmdGIqC5LKB
      ZAPEB24/QD65yc++8x+pfPwbfLzHzy9f+jVxxcVXn/8Mmpzmf/nn/4Jv/OW/pKOmdMs1fOVV
      NjY2+NWrV6gL6Mwub1Ldcork+jxXBsfpOPcILl2772GQEAJVNyjKGq+Pr9DTUknQ5751TTP2
      /bu17TSr0TRnu+rQdAMhBLoh0PSd9IqqA6DqBoYheHNqlYbKIOGAZ6+VVTUDVdMpKtpeS6yo
      OvFMgdm1BK21ZTv5SBLlAQ8VIS8VQS/lQQ9tdWU8dKKOcMBNIlPE43LQUX/nEYKmGwzfiHK6
      tQqf++bjK938b38bUfragUSDJlamGFwu0F4fprahgbFr1/B7nZS3niK2MInb78Nwhjnd1fyB
      iwbNzl9hoNDJM2eqEYbBiz//BZ///Od45cV/IKMJzjzyaTpqA+/LvZc2k6RzMuGAh0xeIZkt
      Es8UiKcKJLM7LVsyW8QQAglYiCRprAri2215JUnC6dh/mpcrqmzEMpxurcbltCNJEnabhMO+
      k97l3PmOnHYbNpvE9HKM2nI/LbVluJx2XHY7TocNp9OOx+nAbpdwORy4nDZ0QzCxsMXTD7VR
      5nfjcR3d5aYDKVlZfRePlMsAuJ0uLj78EVRd4HG7aQhfoCAr+Lzeg7jVkSAXneXlgeuUO3Mo
      /hbaay+WbGHeTrag8NuhRbqbKyjKOulckUxBIZNXSOeKpHMyuaJKrqiQziskMgUATjRVUuZ3
      UxbwUBH00lAd5HR7NZUhL+VBLy6HHYfdRipXpDzo3XuIzdB0g1xBIeR3I0l3Lr1uGNgk6a7S
      AvS219xVurshE9/g8lsj9F18nLqwi0u/fZXOc4/SUO7hjUu/I9TQTe+JFiRJohBb5WevXkVJ
      Rrn42ReITFxiIabxpy98ESF0/u5//5859cW/5PGeKuCABGBzOAkE3ua3tbtw7H6U7A78vqPZ
      AghhsL68hDNYSWXQxfLyCv7yGmoqdrri1OYyL1+6xrKyQlf4CSZHrjE5OU3nmYf4X//Ff8/I
      ld9Q0XXa9OEvyCrz6wkGr28wML3O+naGU23VVAQ9hINegl4X4YCbpuoQ4aAHv8eJ3+Mk4HVR
      kDUKikpjVeiu6lMdvvvQAYfdRlng7mfedpu5qIQwiMeTVFZWoCkFlpbXaWxtw22H1eUl3MFK
      airvzwmytBrlmWc+xje/9X3qAhLnPv57vPyzn9ARdlH+yGeYevF7tHR9gzIJvJVN/P4X63j5
      R99CN2w89cnPk/7pTwEYe/1l2nsvoOq3Bj1H88k8JEZef5m0o5o6zYaUN8gUNd744bf59Ff/
      GVVeKKtt4ct/8hd76ZsbG3j2c7+39/nsox/fN99UrsjI3CZDsxFmlrdprA7x6OlG/oevfRSb
      BFVh3x0fKGB3EnlQPadg5I3fooTauXi6lbdee5lIPMdHPvZpIpNXWE3kae/pp+9ECwDL18f4
      zi9f57/583/GyvQAV6fXUTXBJx47w8tXRhGqymef/wMqfDst3djAZV4Zmue/+rM/5ec//gea
      u07y7e//mKcf6mKrCNO/+g3P/eN/Svg+nrjevl5++aPv0NV7gfW5ERoqQpT5nTR0tPGzH/4A
      XYfAbitk6Arf++Z/4uRjn+ZkQ3AvDzW3zY9efovuOjeJfA0fPV2NjQ+5AIQw+Mk3/4bTz36N
      4o0rzETzNLV28cjZk4DgrcERGtt7SCRTfOGTjzI2+nMyUhmhe3BJyoqGvuuZuDK5ytiNKIlM
      gZOtVXzsbCt/9oULuHfH2Hcur2BzeZaiq5r6oMFvXnkDXei09JynzqcwNLXMkx97Cr/rPuZQ
      Wp5AuJbZ6Ba6Wsl8JM/vf/4iP/jlFaTiOp949nOUV5TvJW/sPM2ZzmUAopubdJzqZ3H4MtH1
      CJWtPUjrU6QLyp4A+h/+KMvRFACFokJVXQOZ1wdo7fkSgfUFRpx+/Pc59fvpd7/JySefo7Oh
      gh/ND5NVVBTVYHB4hq/+yR8z9fNvMZ8WnCiTiE5dZi5lxzczQmVZkOvDlxgZGaGx4xR/9Vd/
      SWTqEkuuE7u9tvhwC2B16hqJnEY6r3JjZp7Wsw9z5mTX3vXyqgY+9bnn+PHffwvF5uLpzzyH
      /sNvsbpdpKPaXAWqpjOzHOPf/XSQdE6msTpIb3sN3/jsWVpqy+6qhX83upxidnKCXPlJ2h49
      xWefe46ZK78gaQh+/psBvvSZx3jxpVf5w+f273lMcfhpaaxiNprDZnehptb57ve26Lr4aaps
      1cxMDLOWMvij3/sksHNwwU3JOpxuEtE1hMNFUdjQMlsYBhj6/h6mLz7/PGNTs7i8fjZvjPLL
      wTW+/vUXcN7d9OFdCJweD9ODr7Ox1sKzz36cX734M06ce4yOKgevvvRzHOEuHg/tZF7X+wz/
      Y++tv2789HM88+nn9j63nf8UbXufpAcjgPGrl7ixHiOZF/zpV77E/Mglvnd5gf/uz79u+ner
      c2MMjM+TSqX58gtf4D/8m/+X9pOneOpTHyfkfmfsiBAKr48uc/FMKwVh8OwXnyeZTPL33/4e
      /+RPvgJIPP3EBX78D/+Ar66NlfGrTCxEMOwV1JXf7o8WQmAYguurcV4fX2Hw+ga15X7OddVy
      srWKR041YbPd1ze8h8MT5iMX+nhtQdu9p8bVuQR//CUXC7O1lFXXoWev3VfeO+U3EMJAzUVR
      Pc18+fPn+P7P3+RcXw/nz/Ux+9PX9tLPjL7FWwMDGI4gIYdCPJknncrQ1KCRiMfRskmEcWss
      ffXyyywvL/PqlWEaAzprqys88sRTzN8YxOey8+tf/YanP/lJ7n06KPHsF/7oHb/5wpe+tPfv
      577QeD/m2OOBCKD34pN0ZmJ88/svoRVTDC3laC6/c1Gauvqob+niu9/+DnJkiYwjRLCyCp9z
      n7+VCwRDXl5/8yq2eAh7nYNgRQV2+6201S09/EFLz97nrr7bs1FUnRtrcS6PrzA8F6Ei5OXx
      3ma+/NQpyoPvb6zN4tAlWs89geQNomcTFNIJHP67mxC/Gz2f4DevDyGA1XQnzz7RwRsjS3z1
      K18mFVng0sAkX/mj5/fS9/Q/zD/vf3jfvB7d53cXn/gEF5+4FcPT1Xth5x/dLfdV3sPifT8V
      Qi3mWN2M09rShE3aeUtkbO06L746yhef/xJv/OQ/kAt1MDFwmb/4b/+K6jJfybzkTJRvffdF
      nv7cF2mrKwchmHrjReLh8zxxun7/v8llMJw+JCXL/PI6bV3d+EzG0JpusJXMkZc13hhf4c2p
      NSqCXh7vbeJ8d/09eVrulWJyk1+9cpmcKnjso5+gGF+lvecMLrvE0vVRxq6v8cQzn6Dcf+cV
      U4u7430VgBAGV998i86uFhY3spzv60bXdf7TX/+fhFp68IeqeerhXmRF40c/+jFf/Uf/CJej
      9MP56+/9e1b1EFVlIc71tHB1ZJJ0IsHHv/gCTRWlhfNujN0VT1nV2E7liSZyOz/JHLOrcWZX
      4/S2V/NYbzMfOdlAedCL7S793xYfLN5fAWgKgxMzXDjbx9Wr17h48cKhrQQrqk62oJDKFfnh
      azPUVfjJyyqbiRyprIysahhCUBnyUVcRoDrso6bcT9DrYm07w6cuduA0EaPFh4P3dw5gsyF0
      HYS+Gw9UmkSmQFnAc1ctbUFWSeVkKoJetlN5tpI7rffGdpZoMkckniVXUPF5nIT8biLxLG6n
      nb7OWj7a30pFyLsTEOVy7jtxPdtVd99Vtvhg8T7PAQSR5QXWtxK09fRSEXDv2wOsbaX5L//V
      z2mrDRP07YxvdUPse6S6phkksjuxMBUhL5UhH7XlfqrDfhoqA9SU+6kp9+8NWyQJhABJ4q6X
      8S2OD0fiaERNN/jJ69c53VqFfzck1m6T9u0NHA4bqazM+naGx3ub37Pr0eJ4c6gCuBkOvd8c
      QAixbwu93+9vFvlefn+3eT+Ie37Y6vNBuuehrgPcz/Ho9zJp1nUdm81210Ode8nbMHZWPW13
      ucJ7VPK+1/QfVBvea/qb9Tz0PcHvrryuKRRk9a7Tg6CQyxDd2kY3xB3SgiIX0HSDRCxK/l33
      uS29EOTzBQxNIbK5zdtzl+4QClzI5Xh7ccy/ZINcLm+at6FrJFNphNj5980NKmZ5G5rCyvIy
      sqa/4/fvTi+EQb5QxNBkItHYO+q5X96qUkRRNZKxKLmiuQ13VptBKeZJpnPvuPbuegphkM8X
      9q2LWT3BIJlM3TG9MHQKhSK6WiSyFd+3noc+B3g3megyA5NLBIN+urpPEg54TR+0hZlRUoqD
      5PYmfr+PrjMPlVwY0uQsV4cmEHoBd7AWQ5W5cP4cpbKfmxyhqMNGNElnSwWGt4mupvJ90wpD
      Y3lxEU3sZBZZ3+Di40/iLtEApRNbbMXTu59UUhmJ8+d69k8MjA8NYHO6MNzltFc6iRZdeydA
      vBs5HWU5KZC3l6lsbGFlNcLDF0pvh5wZH0IxILKdpb2hDGe4jda6/VeYdSXPwLVRbMh4yhoo
      5jJcvHieUlOv6ckJuro6eWvgGmV+J77aHtpL7PTStRy/eek1QlWVtHX1UFMeNP3uF6dHWIkX
      8bltrKxs8MiTH6O+qnSI9dToNTRDYjNZoKU6gL+uk8bKd25eevCnQgjoPN3P+bO9RFfmmLhu
      /i6xXFHjZE8XwVAZp7tbiG3f3hLcxFBlwtUNtNfV0t5zCrfThpnai5rE6d4zNDXU0dLciJLL
      maSWWN+IEAgECAQCuF3m59gU0zEyirSX/k5zd8nu5MTpfjxqnBvLG6YvGbQ73aRiUWRhw+u8
      8/BFMWz09vXSVF9HY0MtciFfMq0wNDz+EAGXnWBFNS67ZGpDXcmzsDBPRV0bPT3t5DNZ07I0
      tXfz8MXz5GNrDI9NoZtk3tJ1kuqQF1+onPaOLtOHH0DDQe/ZXhpra6mvrUQuyreleeA9gJLP
      EEvnCFdU43XZKRQKeE12jymFDNdnF6hqbKXSbyev2ikL7p9eCJ1UOke4LAQYRKMxqmuqS25g
      yaeTOPxluOwShdQ2qruckKf0mFKRZZwuN5IE2UwabyCEveTGVANZ0XG7nYBBOp0nFCq9lbKQ
      ibOdNWiqq2BtYQ5XRSM1JmEYhWyK+YVF7J4Aba2tptsQc+kkrkAYpw1yyW2Et5xAqa5LCLaj
      G2h2L8VEBHe4nvrq0idNqEqRdDqLNxhCyyZQHH6qyvavpzBUEqkCFeU7vU8uk8ZjZsPd8mSS
      W2wmFbram0wSQjadxBMI47BBJrGF3V+Jz/XONv+BC0BORxm6vgFKljPnH2Fpdorevn2i0nbZ
      iqwST+20zGohgz3UwKmOhgMpy8bSLKvRJBISqlKg9dQFGkqEWAhDY+jaALh8yOk0dn85Fx/q
      Ldmya6qCot7c+q5w40aUvr7ukmUZHXwLt9eLLAXorPEQLThpb6x6jzXcQVVk1N15gpJPspky
      6Ok0f5julsTWBtGbQz2hUFC9nOvr2jetEDrzs7N7w8joRoSLH/0Y3hJavM2Gc5v09ZceRi5c
      H2djO0VTxylqfAabWWhteKcNH/h+AEmSCJVX0t3UycDgNYTNfBZfSMWweWup8LbLld4AABK+
      SURBVDtR8g4ydzhOQU5uMDCzTsjrZHtri1B5DQ+d72O/u8TSBS5eOMubA6M8/HA/M3NbNFS0
      7puvrhXxBGsoMxIYfY+SX51GE+AqIYD1GxMsJnXKvE5AQzXMg+rsDhcd3b2szo4xM79FWV2H
      afpCbJlrN2KEPHa2trYor6zj3Lkz+45x58aukpICeO2gyTk85eYRm3Jqk4GpFUI+F9tbWwTD
      1Zy/0L+vDZVsAs1RRl3YgxAyG5HSwyuQiMXidHT3IAGFdNokLUQWprgRUwj7XICGopvHf2WL
      Oo899hjDA2/ham5C0/eZK4oHjWGIRCIpDEMIpZgTi8tr5sl1TSiqJoQQQldlkcsXTdPnooti
      ajEqdF0Xw4NDYn58VKTV/dNG11dFUTOEqqoit70q1uMFk2JrYmV1XeiaKnTDEDfmbgjDrNxa
      QcQS2d1Pqlhf3zQtt5zPiFxREYZhiOj6ikjmzOuZWZ8V06sJoeu6GBwcEnNjoyKr7Z9Wk7Mi
      kd6pmyrnxOZWwjTv/PaKmFyICEPXxcjQjg2TJWwoDF0oys5Fw9BEJpMzzVtRFGHsGi6XzQjN
      xIiGVhSxRGb3051tmNhcE4mcInRNFoNXLovVaOq2NA98CPT+I1i6cZ10TqGyvgmPXVBeUXFX
      pzh8sBAszE6TLahUN7bhkrQDrKdgeX6WVFamsq4Jj+PDY8MHPgQCUDNbDF1fx+OUyOfzVNQ2
      cqK9uYSBBTdmJsnJOkoxj+T00tVzkjLf/ser6UqeZKaAZLORSaep72g1/eIW56ZI51W0Yh7D
      6aW98wSVof27Wl3OMjJxHYfDQT6fJ1BezZmezpL5ryxcJ5EpossFNLub1vZOasqDJVILZqfG
      KagCuZDH5vLSfeo0Qc/+3iZdzpLMytjtNtKpFN0dzSa1FMxfnyRb1FGLeYTTS1d3D2H//ht8
      dKVAIp1HstlIp1PUd7aZ2nDpxjSpnIJWzKM7vLR3dlFVtv+QT1dyjIxP43A4yefz+MNV9J7s
      Kpl/KrbJxlYCAMnmoK29Hbez1LBZMDc9QV4xUAp5JJeXEydPE/LesuGDd4MC2XiU+q4z9Pf3
      4ff7IRunqJdOn5d1+vr6OXWilXB5OUs3lkumLSa3CNZ10N/fT09na8k1gJtk8gp9ff309Z3A
      7wuytlg6bzmXJlTdTH9/H+GAH6+SJWkyJ0lmCvT19XPuoVN43QEiK6XzBkFRhb6+frrbG6iq
      rWRhtnT6fCxCeUsP/f39d3j4d8gVd2x4+mQ7ZWVhludN6pmOEahtpb+/n5NdbXe0YTon09fX
      z9lzPfi8AdaXSuet5LMEKhvp7++jPODHr+ZIlF4XZWV9k46ODlrqwyiqweTkjGlZCopBX18/
      PZ1NVFRVsDi39I7rR6IHCDd1sTg8TMLhwFtWjdem4y4pTYnaiiDDoyMIXaezqx23p1QrCq5g
      OZtDk+S3A7h8IU60t5h+gQ01FQyPjICu0XriBPns7b7jm3jDNcirY4zG17F7ggS9DoImc/iW
      +mqGRoaRdI3mzh4KWbN1BhtVYR8joyMYuuBEVzMOe+ntkO6yKtZHRsiGArgDYU60mXl1JOoq
      QwyPjCAMnY6uDrK+/Te4AzgDZUQHJynEAri8QU50mDckTbWVDI2MIOkqrV3d5HLFkmk9oUq0
      lXFGRzexuQIEfE5CJk9lud/F7MISDi2HL1SHmjM7Xl6ipjyw+6wYdHW14nS981k5Ej0ANgcB
      n3dnz4AQNLW0mCwUCbw+Pw5JwuFwImxemur2X63VlALprEwo5L/jMdk38Xh9OOwSdqcTgYOm
      hurSiSUbAZ8PJAmbBPXNLThMHgy314fTbsPudGEIaG4y23cg8Pn82CUJh8OOcARprN1fAGox
      R6agEgru1JM71lPg8flx2G7a0E1TXcW+KXW1SDpTfJsN75D1Xj2lnXpip7nB5JS4mzZEwi5B
      3R1sWFVbTz65TSKrEvD56O7uvHM9JQmHw4Fw+Gl692nZptPoQyKxOC7mt0t7XN6JIYYGB4Vh
      mPlc7p+hwWtCv8u887E1MbWwftd5D99D3kLoYvB9q+eODe++LPfGvdiwkIiIyRurd5338OA1
      od11ue/8rByJIZC3vJKh4WGK1WV4AmHam/ff4H4TSSswMTWNXZJobG0nVGICnE1sMTM9RRYf
      5X4XqazMk499xLT7dgqV8alpnJJEXVMr5SVWmQGcPj+bY2OIQhKn209Hu1nPBV6bzujkNG4b
      1DS0UFliYrhbS4SSZ3J6GhsSzW0dJY8PT8c2uT49Sd4RJuy1k86rPPnoBZO8waYXmZiaxiFJ
      NLS0UVZiApxLbjMzPUXa8FARcJPMFnnysYdN6+lGZXxyGqdNoraxhYoSTgQAh9dHdGUY5DQO
      t4+O9lbTlWCf3WBs14bV9c1Uhc0PJhZqnsmpaWySRFNbB8F32fCBu0ENTUXVdYq7cRp2h4uA
      v/RDJ8syhqai7K5k+vwB0727ua0llnNeelqqGBsZpe/cuZJfnizLCH3nxQkAXp8f135HrrAT
      ySjLCooiIwTY7A4Cfn9JcSmyjGHoyMrODM/j9eM2CVeQZRldU3dXbCV8gQBOk0NvMxtzrBuV
      nKgPMTIyxkMPnTPN29DVvQhTrz9gehhBPrbKYtrBydYaxkZH6T17ruRDKssywtCQlR0benx+
      3HdrQ5uDQKC0DcXu2UZ7YdV2u+kBZLfZ0O+/7Vl54D2AYegocpFYbOctKi5f0FQAmqqSz6bI
      5HcF4/KaCsBf3YI/M8vERJSa5jbTlktTVYr5DKnsTohulcNdUgAIA1WWicdjGGKnHH6/v6T7
      TtNUioXcXohwRbXTVACaqpJLJ8gWVUDC6fGaCiBY34l7bobJiVUaWs1XjTVVpZBNkd61YbXL
      YyoAX2UjwfQcExPb1DSat9CaplLM3bJhpd1dUgAgUGWZRDyGLsDu9OAPlLZhJpmkUMiyFd8J
      gKxpaKWmorQDRFNVcpkk2YICSDjctz8rD1wAuXSShcVFZMmL1ylh5FWa6kpNPA02VhbZSmbw
      +/0ohTzBqgYCJfSSTW6xsBLZ+5xOpairDJdoYQyi6ytEYkn8fj9qMYe3vI5QiVFKMZtmfn6B
      girweVwoeo7mxlJDN8F2ZI21aBy/348u53EGqwiX/O4M1pYWiKWz+P1+5EKecG0jJUZ6pOOb
      LK1F31HP2opSHiODyOoS0UR6z4aBynpKjfRyqW3mlzfelneauqrykjbcWl9lYzuB3+9HK+bw
      hGspFbMpZ9PMz8/v2VDWsjQ1lYrrEqQSW6xuxnZtWKComvjKMVhfXmQ7ldmzYVlNA7d9nXc9
      +3gfiS2Mi+WkKoQwxOjI6B1SG2JkeFgYhhDZxLqYW4qWTmkYQtf1t/0Y4k7zp5t5q4VtMTlj
      PjnLxdbE9eVNIYQhpsZGhaKb5z06PCx0QwhDTYmxiQXzxEIXI8MjwjCESG4uiaWN0uEKO/U0
      3lFPc27ZMJ+KiOsLkTvkfX821OW4GJ9aNk2bT2yImcUNIYQhpsdGhXzXNkyLsfF588Rvs2F6
      a0UsrMVuS/HA5wAAQpcZGRnHZnfgC1fT1Woe3bm1tsjqdgoMgxOn+gh49u/INKVIOp0hsrnz
      8miXN0jXHdYB4pEVliJxJEOn7WQfYV/pOH9haExNjKMJGw5PkFPd7aYrpOntDeZWN7EZOs0n
      eqkMmr8cLLIyTySeRRiCnjO9JU+0U4t5MrkcG5GdXsDtL6PLdB0AtteXWIkmwTDoOt1HsIQN
      dVUmlUrv2dDpDd5xLSWxucrCRgybodF6sp/yO9hwemIcVdhwuAOc6ukwtWEmFmF2OYJN6DR1
      naYqZH58/ObqAhuxNMIQdJ/uxe9+Zz0f+BAoFYuwvL6F3bk7OxelF2TA4Mb0FHnVwGGzgc2O
      pmuUqobD5SHgU5DlIoaAbNGA9tJ5L8xeJ1tUd96wYrdhaCqw/5dXyMSZW1wD7EgS2N52/Mrt
      7MbS5GScdjvY7RiaApQSgM7s5BRFXWC3SWCzoek67Bt/CU6PD7+2U08hBHkFKCkAgxsz0+QV
      fbeednSttA3tTjdBv4dluYguIFPQEO0tJR5Sg8W562QK6s58xe7CUBVK2bCYSTC7uMpNG0oS
      O/OpEjZUFRVXoJwzp3fWfewOs8fXYHZqkqImdibKtp1jOd9dzwfeAwixs4dUvG33vtl+2pse
      gJvp72UD9/joGKf7+kpOhO8lb3FzYU2InZewSRKSZCvZMt5rud9LPcdGx+jrL72n4r3kPTE2
      xsnevpIT4Xu1oWEIJEnsNh5mNhREVpf3Ju4AlbUNVJbYbHO3ZXngPYAmF8jmC6xvbALgCZTT
      aTIESqdT5NOJ3fdnSTS1dVLmLz2UUAtZZucXMYTA5gmYD1HSaYrZJLHdDTf1ze0lfdjC0Egm
      UkSjm+gCnG4/XSZBYtl0mkI+w3ZiJ+a9trHV1IedTqfIJmOkcjIg0dLRdZsP++0o+TSz88sI
      BE6f+QnS6XSaQjpOfNeGja0dhE1el6QWc8zeWNh5GZ/Lbxo+kEmnKeZSbCd3tkKa2RChk0ok
      2YpuoglwuH10dbaX6OckvP4g2CS2YjteIL3E+wlu1TNFLhUnmS0CEs3tnbetGT3wUAinx4/P
      5UDTNDRNQ1VNIqGAcDiMoes7aRXFdK+sEAZLiwt4QxWgFnG6PaXfl7mbtzDennfptDa7k1DQ
      h75bbuUO5Q6Fw0hiN29Vue1EizvXs3RaIXQW5hfwhysxlAIuj/mx7eFwGbpx9zZcXlzAE6pA
      0u5sw7JwGONteZvVU7I5CIX8aPrud6+Y27CsvAIbO2sBuq6Z2mSnnmH0O9jwgQ+BYMfIO2oW
      TE7O0N/fa5Z6913DkIouk3dU0Vyzf4snZ2PMb+axpZYJtF8ktjRN79mzpmsBN99jXEius1kM
      0NW0f4zMTrnF7rhSMDM5zcm+0kMDAEPXMYRAzUZZSjg4afomxVv1jK0tYAQbqK/Y3ydbSGyw
      nJbQtmap6n6UyPwkZ8+ZvST7Vt6ZrRXSUgWtdfs7K5V8krnVJM78Gp6Wi6RWpjnVf9a0njdt
      KKc3WMv66G7Z/zQLuN2GPX19prFAezbMbbMUg5Md5vFUN+uZ2FhE8dbRWPXOXveBD4FgZ2P8
      3OIqIFCNO3dKkdUlktkiSjFPbWvpYDVD14isLOGQk8Rts+QTpU+QuMnWxgqxVA5dLVBWU3qR
      BXYCxebm5tGFIKeY+aR3iEXXicbTGLqML3znkOWN5UVSeRk5n6OprPSbUHRdI7KyhsimyDpn
      yCbNIiR32FxbJpEpoMp5qptMHlBDY3N1GaeaxsYshXiKk2Zvnga2I6tsJ7MYWpFAVUmvAwDG
      220o3/l14fGtdTZjOzb0mtjkJhsrS6RyReRCjoaO29dpHnwPIATJ+DYOb5DUdoRAZV3JuBQA
      TZWJJTKEfE4241lamhtKnii9N1F9G6YTVU1hK5YkFPQSiSZpaWna8cKUKHcmlUC3e1AyMWy+
      ctMxvaGrbG3HKQsF2Ihs09zSgsOkGdWUArFUnqDHzlYyT3NT/T3V08yRoKsy24k0Ib+bze00
      zS2N2A/chj4i0TgtLc2mNsymk2g2F2o2geQpo6rkBqG32zDIRmSLppZm09VxTSkSS2YJ+pxE
      4zlamm+34QOfA8iZLWaXNxm/9jo53cH05KRp+pmJcfKZGK9fm4RinKWNZMm0Nz1Kb/8xc3Zc
      n5ogn09z+cowLrLMLm2VTGvoMlMzsyxOXSWS1lmYmUIzaUoWZ6fI5HJcuvwWHqfC1Ny6aT2n
      JsbJpza5MjyDmtlibbv0+Tr71dOM6clx8tkErw+MI6kpFtYS95S3mQ3npifJ5dNcvjKI21Zg
      Zn6zZFrDUJmYmmFpepC1hMrC9WlUExsuz02TzuW4dOkKHqfK9OzaneuZ3uKNwSmM/DYr0ds3
      3T9wASiFIpW19dSUl1NVV4vXJD4GwLA5aGppoTIUpKq6Bk0ufbTevaIJO01NzVSVl1FVW49R
      LP3QGbqCP1hFbVmYyoZ6gj4XZk4JVYOGxiaqKsupqm1AUswPjMLuoqm1jYpAgOqqClSl9Mac
      e0VITpqaW6gsC1JdU4Mum53ccG9owkbjTRvWNSDk0vUUQsUfqKQuXE5lfS0hnwvN1IaChsZm
      qqoqqKqtB9W83MLmpKm1lcpggOqqSjT5CB6MpSl5bswv7c3QPf4y2ltKu0G3Nlb2XGwAjS0d
      hEzcoPdCPLrOZuzWPKGuqa1kOLQwNG5cn91rsRxuH53trSUn2KlYhPXorZb2TqG80bUlYumb
      X/D+obz3y3Zkla3ErXlCQ0u76bDzXkhsbRDZvtUr1za2mrqSb8zOou4+9A6Xl46OtpIT7FRs
      k/VofO9zdV2T6ZApur6859IuZcMHLgALiwfJAx8CWVg8SCwBWBxrLAFYHGv+f6SXzJoBVi+D
      AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Pareto chart' width='192'>
      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
      APEmWHDI+f/D702js4lRNgAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Pie Chart' width='192'>
      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
      AABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='PieChartConsmp' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABYlAAAWJQFJUiTw
      AAASq0lEQVR4nO3de3gVd53H8fece3IScg+XACHcaUiBcqeULgi1rdQWXbVaV7eP21qVFWt9
      Hi/rPj5qrX+4+mzdtbXadUtbS1UE2kIpAsVyv5ZAIJAEciPkfj/Juc/M/gG0hJNzkpMmLdnf
      9/UXmd/lzPDMZ2Z+M3POTzNN00QIRVk+6hUQ4qMkARBKkwAIpUkAhNIkAEJpEgChNAmAUJrt
      2j+8Xi/BYPCjXBchPnSaPAgTKpNLIKE0CYBQmgRAKE0CIJQmARBKkwAIpUkAhNIkAEJpEgCh
      NAmAUJoEQChNAiCUZuu7ihA3J8PXhultpT6cxohkN8mJzrj7kLdBxbBihv2Eit8gXPImekMx
      6AHWtfwrXmsKU8dlcM/CySyYkYPV0r+LGzkDiGFDb76A/63vYTSd77ncMPCFw5y60MCpCw3k
      T8hi3T8uZGR6Up99xjEGMKmpriLo81Db1HZliWlQU1NDW+NlOryhuDZGiHjoDcX4Nj4csfP3
      5mxlEz98fg8NrV191o0IwLEdr/DED37MD3/wA4pr2vH7/RjhEIFgmI62dvzNF9l+oAhDD9PR
      1srmN7bi6+rAHzLw+3x0dnaiGyZ6OEhHp4dgUIIhPhjT34Fv27cxfW39btPY3s0vXj2IPxiO
      WS/iEsjQdZLTMkg0vCQ4NF7d8CfuXjyZ/dUu2s8fYcynlgAmW156jmoPtPsNygr3kzIni9/8
      /hekJzmZfOeDNJzYhtfiIjFzCl958J64N1qIa4LH/oDZURN3u7KaVnYeL+e+JVOj1un1EmjJ
      8ntYlD+W8qpGTEyIGCaHaPImsPZrj5CVbH9v6cT8+TzyxQdoqq0ikDSWr37lCzgM+Z6xGDgz
      4CFUvGXA7d86UkYorEctjwiAI8HN7tdeYffRUsaOyaSjtoSXX3sbp8tBUnIyFpuDpIRkxmcY
      /PLpZwiYLlyJSTisVpLciWhWB+7UDFLDjTz9zP/gCWsDXnkh9LrTmN6WAbevafJQ2+yJWj5E
      t0F1tv3lj5yvqKFg2RruWjRj8D9CKCF4+i8Edv84Zp21LetoN5Kjln/voaUszh/ba9kQ3Qa1
      sPK+z3CnbuJOTBiajxBKiDbwNU3wmU6OBabjM2M/APMFot+IGaIAaDhdCcT/XE6InrTEjB5/
      h0wrF0I5HAjM5FhgBt1m3wfYpARH1LKIALTWXeS5361n9cPfYnp6mP/41TPozgwe//bXcdut
      A9gEIQbOmjkFNAtN4WSOBqazzz+Ly3omZj8fYVktGnmjU6OWRwTA6kplyazpBEIGRQffZsmn
      HyO1YR9HzzewvGDMwLdEiAGwZM/gBcuj7GlNRR/ABcvEMWmkJ0c/S0TEKCUtA+fVI31Y17HZ
      bNhsNnQ9+q0kIYaKZrUzcf7HB7Tzaxo8sHQ6Vmv0s0VEyZkjO/nTtl1seP55RubPZ/sLv+KV
      3eeYO2103CsgxGD4+IJJ3JKbGXe7hbeMZVGUuz/XyNugYlho8/j46fq9XKzt3+sQ+ROy+Pcv
      LyPBaY9ZTwIghg2PN8Af3izk74WVGEbvu63VonHvoil8YWUBia7YOz9IAMQwY5omlfXt7DlZ
      ycnSOlo6fVgsGtmpbgomjeRjt+UxLnsEmta/NxAkAGJY0w0D0wRbjIFuLBIAoTT5UrxQmgRA
      KE0CIJQmARBKkwAIpUkAhNIkAEJpEgChNAmAUJoEQChNAiCUJgEQSpMACKVJAITSJABCaRIA
      oTQJgFCaBEAoTQIglCYBEEqTAAilSQCE0iQAQmkSAKE0CYBQmgRAKE0CIJQmARBKG6JZIoUY
      WmbIR7jqAEZ7Nbu8tzFqZDYzJ2bjtMe3S8dR26TL00VCghN/yMSd4MQ0Tbq7u7FbAXsiTpuc
      UMTQ8vpDbD1USt3RTTxs/xOaBn++OlG222XnM8vzuW/J1H7/XHpEraL9W/m3Hz3Jk0/+nMrm
      rh5lJWfP0FVbzKs7jgBg6iHWv/wyDVWlNHUGB2HzhIiu2x/kqZf38cedReztyKPDdN9QHuKF
      7YX8YsNB/MFwv/qMOAN4O9sYO7UAR2cVXl+AV17Zysp5eRy+7KKz7ByTxt4GmOze/CIHiy8T
      sidRc6GI5IRcXvj1TyCss/Qzj9H87lZKG7rJnb6Ahx5YMSj/AUJdum7wm03HKCpvBCCMjX3+
      W7kv8VBE3cPFNfxh20m+9sC8PmeK6fU8kZScQorbRWdnN8FAAMMIEwyF8fv9XJlNI8SFuhDf
      /+4TjBxhJxQMoBsGY6fM4fFHP0tF2TkazXS+s+5fMLyeD7rtQnCyrJ5DZ2t6LNvnv5Ww2ful
      zt+OX6S8HxPq9dr69IlDnCmtxO6wc7nsJC//9S30HvPI2EixdfD0b56j2ROK7MCeiNZawTO/
      exFP/85EQsS083g5xg2TGdXpmZwPje+1vmnC7hMVffYbMUWSoeuEwmE0iwW7zYauhwENTbNg
      mgZWqwXdAItmEtYNLJqGRQM0K6ZpYLFo6IbOwV1vUV17iYScBXz6rnkD3nAhAL745CY83shx
      5iLnWc6HxtNuJEeUjcsewX9/696Y/UaMASxWK06r9f0KtuunmrxywrBdLXZYrPRkvVquMePW
      2WTn5TNlSl7MFRCiL2Hd6HXnBygMTiZs3rgfXuHxBjFME0uMccAQPQfQyBo9jiyZXF4MApvV
      gsth6/XOjt90Rm2X4LTF3PmhlzGAqYc5d+oEjR0+gt3tvPn6ZnbtPUo4ysTEQnwYJo5Ji7vN
      5Jz0PutEBKC67DRvbHmN6uZu/N0exuRNo+zIW1xs9se9AkIMluVzJsTd5o5bex8gXy8iALnT
      b2PZvHwAkrNyKNq/leouJ6NG9D3tvBBDZdmsXCaMSu13/fwJWcyfntNnvYgAeNpbqG9qpq6m
      hsqLpcz92BrmjLNz7lJ7fGssxCByOWw88bnFZKUk9ll3TEYyj392ERZL7Ot/6CUALfVV+F0Z
      dNdVYHUlUFpUSMb0ZcyflDGwNRdikIwfmcKTj6zglglZvZZrGsybPoafPbqCrFR3r3Ui2tz4
      HECIm51uGJyraubw2RrqWq68r5Y7KoUl+eOYlJPW5+sP15MACKXJ+8tCaRIAoTQJgFCaBEAo
      TQIglCYBEEqTAAilSQCE0iQAQmkSAKE0CYBQmgRAKE0CIJQmARBKkwAIpUkAhNIkAEJpEgCh
      NAmAUJoEQChNAiCUJgEQSpMACKVJAITSJABCaRIAoTQJgFCaBEAoTQIglDZEk+QJMXRM0wQ9
      hNFWgdl5maLgRDIz0hmTmYTVEt8xXX4eXQwrZsBDsHADoaI/Y3rqAVjbso52I5mczGTuXTSF
      lfMm4nL079guARDDhtF+Cd+b38FoONtj+bUAXDMzL4vHP7uYzH5MpxRxvig7uZefPvkUv3r6
      WZo8ges/nnd27aT90mnWv7EfADMc5Lnnn6escB/lTd4BbpYQfTO8rXi3fD1i5+/NmYomfvbi
      Prz+UJ91I84TrXVV5C+5G/PSYaobOzi69ziL88dyqtFBV5sHTcsirBuceGcbfztYhN/qpquj
      laTsIM/++hk6O7tZ9eBXaS/ew7GSy+TPXcbqFQsGttVCXBX4+88x2yr6Xb+8ro2X/naar35y
      bsx6vY4YykvP0tARwGExaWpsIuj30NLeTUNdPQYAIY6ducy3n/gWWck2Olsa6A6EsI8YzWMP
      3cupU4UU1wdY940v01pfF8dmChFJbyohXLoj7nZ73q2gsa07Zp2oQ2Yj6KW100ddZTFv7HgH
      vcdIwYo93MZfN22mpev96ettdgc2qwWsDoItl9i8eStdkbPbCxGXcOkOMI242/mCYY6X1Mas
      E3EJNHPpatLqm3AmrmRczijyR34T3WLHmZCEPjeX5BQ3a5bruO1zqW/xcFeiE5cNrK4Uxt+7
      igS3g/uX61zMMCivriQlJf4p7oW4nt54bsBty2paY5ZHBMA9Io2pI97faTNHXTfbdvKVUXV6
      ypU/cxOTr29KgvPKTN7pDpPm1FTSQtO4444lA1pxIa4xfW0xy51EH+x6vIGoZTBkD8I0phbM
      Y+rQdC4UozlHxCyfYq+hIZDea1lSgiNm24gxQFtDFb975r/YtH0vumFQeHA3J85Xx7G6Qgwu
      68gZMctzbM1Ryybl9B6MayIC4PMFuf/Bf6LxwgmaaqsoqaigtLKhn6sqxOCzTV4FRJ/9fbHz
      DBqRg2S7zcLsySNj9h0RgFE5Y9nz2gaypiwgOyeP5QsLYny0EEPPOmom1tzoY8kMSyfT7Jci
      li+7NZdx2Skx+44IwIGtG6gLp5LhttDWVMvh46e5cO4UdS2eAay6EIPDtfz7aO7MXss0DW53
      FvVYNjLNzZfuntVnvxEBmDh7KQvzc3HY7WgWC5nj81mx8BYsFjkPiI+OJW0CCWt+i5Yyrtfy
      ec4SEjUfABNGpfKjh+8kNcnVZ7/yMpwYVozuZoIn1hM6sxECPa9K/jf8ebJvu59PLJ5CcqKz
      X/1JAMSwY5omhLzotScxOi4BFixpuWgjb8XiSEDT+n+1IgEQSpOvRAqlSQCE0iQAQmkSAKE0
      CYBQmgRAKE0CIJQmARBKkwAIpUkAhNIkAEJpEgChNAmAUJoEQChNAiCUJgEQSpMACKVJAITS
      JABCaRIAoTQJgFCaBEAoTQIglCYBEEqTAIhhzTRNPshvuw3RDDFCDA1TD2G0VaBfOobeWIzZ
      1cSzXWtwJmeQNzqN26aOJjs1Eau1f8d2CYAYFkzTRK/cT+DIbzHqz4Cpv1d2umU+7UYHAA6b
      lanjM3hwRT4z87L7/J1Q+W1QcdMzAx78u38SdbrUtS3raDd6Ttho0TRWzZvIV1bPwWmPfpyX
      MYC4qRmeOrybHiVcsj2uuYIN02THsYv85IW9MWeKlACIm5YZ8uN/87sY9UV9V47iTEUjT288
      QljvPTwSAHHTChz4T/Tadz9wP8fO17Jl3/leyyICcKm0kGeffZaXNmzGEwhfV2Lwzq6ddNSV
      sGXPlZUy9RB/3riRssJ9lDd5P/CKCnGN0VZFqGjjoPX32oES2jy+iOURo4PaC0XkzVtJoPgt
      Tlc0YTZdpGDySEpb7GimFU330dLRRfmZI2zavpcuEpiVl4kTnY0b1nPpchOrH3oEX+Uxdh46
      y4Jlq7hj3i2DtiFCDcF3X4Swf9D66+wOsP3wBb6wqqDH8l4vgd7eupFT1Z2MTnVx4cJFfB2N
      VNW2UHruPFduPoXZsfsoj639BhlJVuqrSmnt8tPQqfOl+2/nwOGj7D5+gcceeZCKkrJB2wih
      BjPkI1x1YND7PXb+MobR86ZnrwEomLuYGTnJlFY10VRXycEj76L3aKdhhLwcP3qY9u7378e6
      k5JxOR2YQKirjWNHjnJdsRD9YrSWY3ZcHvR+K+s7aL3hMijiEmjynGV0ninFXXAnC+ZOJi9x
      NUHNSWpmDqGJKbjTM1kxP4eMpdM4U97A5x64hzSXhj11BKlLF+HMTOIfFo7HO95NSUU5Ca7Y
      M3ULcSOjsw4Y/MdThmnS0uElMyXxvWURAcgYncuq0bnv/T2tYO77haPSAMi72n5J5pgebVOT
      xl0tNzhw9hCtXRprPn3HoG2AUIPpa+13Xd3UMM3+zwrZ3OFj2nV/D9GrEBZuX/VJbh+azsX/
      c5rV0a96pgn7/QV0mu5+9+1y9tzlI8YA/u52dmx7nSOnSjBNCHS1sGPX34nyHEGIQae5s/pV
      r9lI4ZXuVZj0/wyQnpzQ4++IAFyuuEh6Th4Hd75Ouy/Ejte38Pb+/YQlAOJDYknPA5srZh3D
      hPVdd9NtJsSsdz23y87ojKSen3VjpYm3zKar5ixJY6bjrz2Nxz2J3MxEwrrczhEfDi15NNbs
      GTHr7PPPojA4Oa5+p+dm4rRbeyyLCMDJ3X/lXIeblbfPpr6xlaaKQo6fOMWpkuq4PkyIgdI0
      Ddu0e6OWN+qpvNq9AuK49NE0WDl3YsTr0RGDYHfmONKaKzl85F1W3/8J5ixZxZmiQmbk5/V/
      C4T4gOwz1xAq/CNGW2WP5Yap8VLXXXjiGPgCzMjNYv70MRHL5fsA4qYVrjqE77W1oL//OvM7
      vln8vms18Rz9XQ4bTz2ygkk56RFl8jaouGlZxy/Cefs3ubazN+kpbOj+GPHs/FaLxtpPze91
      5wf5SqS4iWmahn3OF8HmwPfOL3mp4y66zMS+G17lctj42gPzWFowPmodCYC4qWkWK45Zn6c9
      ZTYd26rhclufbSwWjZl52fzz3bOiHvnf61/GAGK4CIV1DhfX8PaJCs5fasHrD/UoT0pwMGvy
      SFbMyWP2lFHY+vHLEBIAMeyYpok/GKap3fve250ZIxLITEnE5bD1+UsQ15MACKXJXSChNAmA
      UJoEQChNAiCUJgEQSpMACKVJAITSJABCaRIAobT/AyXvryA4gvxqAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Scatter Plot' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Side by side circle' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Stacked Bar' width='192'>
      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
      r/yILgAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Tree Map' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABYlAAAWJQFJUiTw
      AAAgAElEQVR4nO29aXMUSbrv+YuI3Pc9U1Jq3xGbgGIpilp6O919rO+1M3fm2MybmXlzv8l9
      MV9gPsB9cW3GxmzG7LZ1dZ9eTndXQRUUFBRQIBDad6Vy3zNjnRdJgVQIUYCEVJ3xM5NZZGS4
      x+Mp/4c//riHu2AYhoGJSZsiHrYBJiaHiSkAk7bGFIBJW2P5/ol/vzXN7ccrh2HLkaY3ESTn
      caLqR7fLFPM4qCkaVUU9bFN2ZSDk5dej3fzXaw/IVRuHbQ6wiwBuTS3x3/749WHYcqQ5P9HL
      YjSArOmHbcpLGYn4yTVlcrXmYZuyK1f64vx6tJtP782xmCkdtjmA6QKZtDmmAEzamj0EIHHp
      zDDvT/TgtonYXS6Czu0ek0B33P9Cqo6wDwC720PM/YKH9YzueBCAgN+DQxLeyPjDIuBxc7k3
      xljYjQBEPU62l8DrduGVXkwX9zgA6PK5Xp65ZKXLbQUg5nG+sY0el5PLPTGORTwIQMTt2GGj
      y+kkYN3NxtY9O/eyUbTQ5ba1bHQ73tjG7Qx3hLG8pBpEA15sB1RF9hCAFatR45uFLJ+cHUIQ
      JewWgYmRXq6c7KMjGuZ//MkpxjoDO1IN98QAcAVC9IXsDPR18fHkAA4RxoZ6+HhykKDHxb/8
      5DTvDcexWS2Iksil0yN8cnYYn00g2RXno9ODDHe8KLCjQDzs5tHSFk2rmxMhBw6LiGSx8X5f
      nLGQm8m+JD8biOKz7Px5B0JeAMZiAURR4r2eOMcjHqxWKxd6YpyMeemMhPkPo110um3YLSJh
      n5cL3RHOJvwgCEwmY1zqieHeRWDbCftczG9kKGLnTNSN0yIhShYu9MSYiHiYSHbw8/44QdvO
      jL6zcTTiRxREJpMxTkW9SJKFc90xJuN+YsEAvxntottjx26R8Hk8XEyGOd8RAAROdEa42BPH
      //LnHwCRgJ8ro0kiDgm/24EkiJwd7GKyK4jw9Ph0V5BPTg7zyXAC6wGI4JUuUL1WpawIuL1e
      4h4bQ91hljeypNIFHi1u8Hi9sON6q8PFh5NDXBrvwmqzMZbwcHu+xKWJONV6E5vLz7EOO08W
      N7k1kyIaDuCySbgkg8/nipzqDTGW8PD5vXk64pH9L/E+srCZI+j3kPS78Xo9+AWVtXKDlUKF
      u6tpSurODnNXKMCl3hh9PgeD8TCFQgGP34fL0GloBse7ImRLVZ6ksqxXZZJ+N0G3i9V0Dofd
      QTIcolwqkFKEXVuY3VjLFHC7nST9blwuF2ErrJbqrBarfLueJi9rO66P+71c6okxGHDREQ6h
      1cpYPV78gk5D1RjrDFMp13iylWOl0myV3eUik89jsdoI+/0YjQpLDYPgngIQONMd4vZCilP9
      na17J+IIlTx2v48T3QnKmS2+3SiwsJXjxtwmygEE4F4pAJvdgdti0PpfGvz1qymS/X30Bm0I
      gsj3Rak0anz+zSzXH62hGxCPhTne62OjBMc73NyeXseQJEBA3Ja4qShomo4oCAiCgMVqxXrE
      eyhdkQCFUhWASrnI9VSVDwcSaLqBTXzR+LVcgetLWyyWGhiCwFg8iKCqDHVEyBUKrFRkRN1A
      EJ//rgYGsqajYyA8Pemw/MDaD8SCXqq1OgD1WoUv1otc6U+g6wZW6UUbU8Uy15e3mCvUMIDh
      aACrrtERDaHUKixWGkiGvsNGgKaqowOCAALgfKWNBh63i5PJCNli+dnZ4c4oVl2jqelYJBFJ
      FNENA6t4MD7QHhpV0CU354YtXPtmjobkYF1Q6OpIoFfyrBZrWFM1jvXGcLidSAIojQaLaxkA
      asU8C0KD1Tvz9EVcbGXyWBwOeoMWFrcK6AWBM4NxFrZyVJsa8+s5aCrMpjSEqsS54U5E4WiG
      HLfyNSZ6Y+Srde5n6yRkAQSRkYiPx5s5VisK7yUjDNgbBJwtRztVrLCYrwDwJFNktVTH0xkG
      VeZJvsGJeIB8qYLSrLClR0m4rCzmKtR0kDVYzFXYrDQ42Rkm4bWR2dzbxly5zsmOCKV6g2+2
      qsS9OggiQ2EfT7bypIoNerrC9IsNgs6WP58pV1nMtyrjbLbERqnGtC2MzVCZz1Q5kQhQKVdp
      KA02FA9dHhuL+TJlFQQV1HyZbKVBIhGmz+dgNru3jX99uMxEwke20kCuqWSKVR7aEjhQmFvP
      MtYTZ9ha49HyFpO9cQpzm6j73AoI358M93/81z+99jiA3dbSkWEYyIr2iqtfaRInxnqJ+hw8
      fDhLqno0BnXeZBxAFIRnTy5V19He8p9nt9k40xlE0FSur2T5fnZvMg6w3UZNN1Dfcm6kRbJy
      LhnEauhcW87ssPFKX5z/8otz/Ov/+d+PzDjAK7opP4ymvJ+V1ODbx4v7mN/hoRsGzbet9dto
      yjLXF1P7lh/sv42qpnBjaWvf8jto3srLDm0Llfl8rv1R0z8AgiDidzz3gb9zMY4WAgHH8/9Y
      wHH0bHTYbTifhchFgu5d4rZvyR4CcPC//sf3+PjsGL+Y7MFmbf1YDpsFr99HyGnh+GCr9+71
      uDh9vBeXYKE37sVuteD3unE+7cUGfG4CT+PGomjlg/dP8U/HEwiSxOUzI/zk/DiXxxL7XriD
      YrS3g1/0xvj1RB+dDgmbJIIgYBcFkn43FtHOSNiFIAiEXU5OxP2EfG5cAjisFsIuGwIgiiIR
      lx37039ybyTI5b44/3GsCwFIRsP858neN7KxNxHl1/0JfjHaQ7/H2rIRAbsk0OV3I2BlPOZG
      EARCLgenEgH8bhdeScBhkQi77C0bBZGwy47jaYc57PPx88EEk7uMAb0ul48P8slwF/9ybgSv
      peWKSZKIRYCesJdw2E/MYcEiSUQ8Po53+ugMebGIIh67lZCrVadsVgsRt+OZK9eXiPC/XxwB
      oCce5sPRJP96ZmBXG/ZsARqNJtWmQrUuc/F4HwAfnx3G7fURdrWecLGOBOcGIvhddjAs9Hb6
      +Oj8BL0xHx+eHmBosJdjyQA/PTsMgK4rXLszT13VMTSNL+48YS3fQFGPhq//wzAoNxQasooq
      iJzpCILDywcJN90B9zO/93xvgqjLjkMSiAbdOCQbvxnppCsYZDzk5MpAB2GPmwsdrbGUpUye
      OxtFVMNAkqwMuATmy8ob21hpyjTUVkTlbFcE7C4uJ7z0+J/beDoZI+FuVfCAz4nHYuFXo0mi
      Xj+TMRcX+xNE3U4udIUAOJUIUGpq7MfYpa7rlBoydVnG4glwKuqkuzNOv9dGd6g1oCoIAlfG
      egh7HFgEgc6wD8kV4D8dS3BqsJOYw84n492EozHOxVuDeIubGWayrejccirLraUssrZ733RP
      ARSKFRbXs7g97mfnvl/uRNjD3cfLrGQrz841alXuz21QVyHqs/L11Brp8u4ds0vnjuGUi9yc
      zez9ax0pDNYLFdZrCmHHyxw/AcnQeJwpUd42HrCaLzGdLmN3OFDlGtPZ8rP4dtjn5aPuAH+e
      2eC9gU7cVisjET9Rxw8Pe25no1RjrdIk9FL3RsAp6Eyli5S2BS82C2Uep4rYnQ5QmjzOlJCf
      FkHXNe6upbF4PHjfyKrnqJrKSqZEUQaPbfcyCoKFZqPG9GYeeVsHfXYzw1yhjtfpJpfPMJ0u
      71qZA34/Px2O8McHy7vmv4fbbuAP+DnWb6VZr5DX7Xw8OYTPLqKqKopuUG/IrGxVef/sGA6v
      nVkM6g0VkAGoN2TWyio/OT9CZ8jN54Bkd3D5ZA+DQSvLRZXhuJdFTWawrjC3VX65OUcIWdEZ
      TgQRHDYe5lQ6Ii4udQnUSxkaaBgYNFQNRRS53BPFJmjIsoZmtM4bhkFTaWK3B7jU48Stt6YG
      n+gIUW3UOdUR4KuZJXTgkqyRbrx+ZE3RdEajflSLlbn1IiGbjYtdNpR6kbquAgZ1RUMWbHzQ
      E8MhgVLXUA2Duqq3vpdlJKuH93uieMSWAu5ulrjSn0DQVSp7WvBqdEPkWDKCyy4yValyejhO
      h9XO/XyGuqyiqhpoCpLdxftDdlDLNHQVQ9eoqzqqoaLUK/Qlk7wfsCJkW9P4hzpjDET9NBsN
      fKEQ5VqNMz1Rvlh4sXO+L2HQvQiFQ4x0+Ih4rPzuxsy+5fuuOYjp0KPxMEGnjWq5yLfZ2lvn
      dxDToQejQUJOG1qjxp23fEAdRBhUEARO9XUQ9LiYn19gqfp6D4sDD9zkcnm+KZV+ZD7+u2E2
      nUMShCP9jsFCpsCKeHRtNAyDB8ubCLRavdfl4COXhkHziL6hdNhouoH2wnDW0UI3DOR9HCc4
      CNS3EOcRn21jYnKwmAIwaWtMAZi0NaYATNoaUwAmbY0pAJO2xhSASVtjCsCkrTEFYNLWmAIw
      aWtMAZi0NaYATNoaUwAmbY0pAJO2xhSASVtjCsCkrTEFYNLWmAIwaWtMAZi0NaYATNoaUwAm
      bY0pAJO2xhSASVtjCsCkrTEFYNLWmAIwaWtMAZi0NaYATNoaUwAmbY0pAJO2xhSASVtjCsCk
      rTEFYNLWmAIwaWtMAZi0NaYATNoaUwAmbY0pAJO2xhSASVtjCsCkrTEFYNLWmAIwaWtMAZi0
      NaYATNoaUwAmbY0pAJO2xhSASVtjCsCkrTEFYNLWmAIwaWtMAZi0NaYATNoaUwAmbY3l+yd6
      O0Kcn+g9DFuONON9CYJ+N4quH7YpL6Xb76EsK5SaymGbsisDId9hm/ACLwigEvGRGUwchi3v
      hN+MdpFu1F47nQKEX+P6oaCf+ULxte/zOlhFkV6/h5VS5ekZnaBLIoj0VvlGXE6amka5Kb+9
      kduIBqz7mt9+8IIAVF1H1o7uU+5tUXUDVTcO/D7aO7mP3iqPsb/3UXW99bfP+Wr7nN9+YPYB
      TNoaUwAmbc0eAqiy8qffk7r5dworG2i1AnKtue17mfS9ey+kyj3+FgAlNU1hs/TS3NP3bmEA
      ciGDpmpvaL6JydvxQh/gOTr2aC/R08dIffUZLlsnNWJkb/8NyRPC0xUjN/UN9kgMX1fHs1Rq
      rYLWbKLWSmhSmNT1v2DoGp7xD1C3pqnnMrj7TpCfuovoCmCljt3iYvXq77B7vbjGPqC5eAdd
      tCNYXMROnnwHP4NJu7KHAFoIgoAgSRi6hoGAzetFUTRswRi+vpEdlR/AkCsUZqdQMstInXGq
      6TSeZCeVxVkk6giSTrMo4+0bIjQ8TGn6DhgGrq5Bon1httbTYA8QO36S9L2bB1Zwk8Pj4kiS
      gY7Xj8QdBHsKoL4+T0YoIXpiiIIOhoZodUIti1wz0GoZyptbeBOxZ2kEu4/wxCTNVZGK5sAV
      iSJa3bhjEfLTKWzu1i1FFAoLCy/6YBY7WnaW7MM7qEcznG3yluQsBukjEhHdQwAekj//BQgi
      osUCGAQQMKJeDANEq5XOj36FLtfI3L2BboDo8BM5eQ4AW+cJQgiQ/Bhd0xGtVpzhGCAgiCKQ
      bJ2XekEQiByfBAGiHoO6FwyljCG+XTzbxORV7CEAAclm3/EZQLA8l65gsSJa/EROX3wxtfjd
      s92CJPFCWgBpewUXnuYvGIgSNOsOIuN9P7QcJiZvxCv7AO8eAUekC0fksO0weZc0Cjns/tB3
      z8F3xh5hUJnMnets3b1Jo1Td8Y1ayaM0FIpz08/OVeamUXWZei6/5w0NXSN77zpb39xAkf9x
      R5xNXo2hKtRyOQzDIDf3GE03kMsF5HoDjNZxo1Jl4c//H7nNLPoBjCTv0QI00QUf0Yle1m/e
      xd/fg6ezm/LyPA6/G10waJYKGEqD7NQ9qstrdA72oTUUSvNTyJUK1mAX3qiX7NRDDLuX2MRx
      DKWMJniJTR7f98KY/JgwWL35GbZglOzKBhKg5BZZe7IJcpWO8X62lrL4EgnURp1mpQyx0Hee
      +L6x50hwdXmajS8/wx5PUkutA1BZW0ItpZHrrYlS5bkHOPtOPg2HytRSaeq5HKFjZ2mml8k/
      foD/2DlolluZChLIJdY/+wO1cmN/S2PyI0KjnNqiWamiKa16UF1fRFF0aDYorK8RmThHuLcH
      dyRBsLcPUdx//2hPAbh7Run44Oc0U/NgaOhKE/X7U20NHQwDrfl8lFiQrIgWCQQRnjZb331v
      qAaBibOE++LUchVM2hULkaEBDF3HHYljsTvwDZ7ASgNrIEJk+Bhbt//GxvQM7liE9du30A5g
      KvoeLpAdQSuQvv8NwfEzSFqJ7OMpPD2DWAN+JIsdqasHR9BP/tEDBH8UETuergTQah08XT3Y
      vS5y0988azEEi4XKzAN00Ulo7HUmGJv8oxE7sT16mARg6OOfPjsz+NHzY//gwdiwhwBsRM9d
      3vbZTzTavfMKZ2sUOHzy/LNzrlh423EHzfQyhqbh7WmVQLS5CE2cfXvLTUz2gQMPg9qjPcSi
      PQd9GxOTN+IIjgOYtAvZR7epVJqAje5z59jex62kU1DJoYd68PndQJH1e1sEunw4wnH26g/n
      Z7+lnC3giPYSCNtYf/AIZ8cg8YEXH8SmAEwOjWalSde5S2x++Udq6XVkw42tmcLwJ2nkc9gF
      BV3X2fr2Jo1GEVXvpJHLYberPLr1BJtVpOfi+6Tv3UBVZdy9Zwl3BPB0DRLotzJ39TNqq9B9
      5WcsXf0L7CIA84UYk0NDqxVYvXWNal3Eoldo1GTUSgFZVmkUWwOqht6g0RDpee8cVlGkUcxj
      KBXcPScIh72Us8vo9k56RnupVZ4GWvQGc3//C7ET76ELApIALxtiNgVgcmgIogiChKA30SQX
      xZk7bM7MtabgiyKCICKINrRqmpWvv0HDeJpGRBQFBFFCcvhopmdZuf8txtOQ+5Pf/7+ILi/1
      XIZAIsLCF38D6+4rUpgukMmhkbzyyx2fx3+RfHYcijwPkQY+/tWLaYMAYQxdQ+/vp5lZwRry
      AHDsf/rPO64NDb/cBlMAJj9uBBGHz4/VF8Edcr12clMAJj9qBEHAGY6/cXqzD2DS1pgCMGlr
      TAGYtDWmAEzaGlMAJm2NKQCTtsYUgElbYwrApK0xBWDS1pgCMGlrTAGYtDWmAEzaGlMAJm2N
      KQCTtsYUgElbYwrApK0xBWDS1pgCMGlrTAGYtDUvvBPcH/BwKRk9DFveCX6HlbS5Kvuh0u3z
      4LQejdfRX7BipVjl9kb2MGx5JyS89ldfZHKglGWZYqP56gvfAUdDhiZtRU1RqSrqYZsBmH0A
      kzZnjxZAIf3NbbC5CY4cQ5DLqIITu+s7F0KjtpXFFYvtSFXPpnGGo2jVHApuHO7dXY7a1ibO
      WAKlkEH0BLFY3s2ewBGXg5jXduD3ERCYiAZeO13Y6UTRlR+8IZwgQNgd3D0vh5Nco/7aNiAA
      224fetN8vkfU+fKFqzRVQZSs73yXyD0E0EAzvIR7YmzcukHnyVF03aA4c49GXceXCLLw57+R
      /PiX+Ls6nqUqLs3hDEdR88uU9R7U7CLVXIXIiUkqCw+pl5sEhwZZ+vNvib73CZ6QB1HTyDz6
      GlU2CJ94DyW7RHkzg6ujb8cu9PtBsdmkoLz9P/OgUHWdut7clx0RBWCtWn57o4T9yUfco3Zv
      3L1JYvIyuz0HU/dvETj2HvYDcNhfmaXVG8VqfYxS2qKOSHl+gci5D3EEXQT6R3dUfgCjXmTz
      zg3UzDy2gSjFXI7EeJL0owW8QSfa+hzFjQ58/cOER4YpPL6N0+5DrsnEhzrILK2h5VMkzr7H
      1r3b+y4Ak6PDxjfXqNUU3InW7kFaLcPMja8RbU76J8dZ+Poe7ng3uQe3KNZEBs9PIon767W/
      UgB6s4Kq0NqQwBDp+uCnZO5dQx+7hGHoGIaBsE3ZgtNP4sxFmqsOik2D6uoMaVHDEY6TX8sT
      PX6c4qYKGM820AOQHC4kiwVD10EUQVM4gG1hTY4MKun5RXzd/eSWZvH57JTm7qNKHkgtsT5t
      0HH+p/g8IkZhlcjZs0gH0GPdc48wlBzpxw2ip88j6WWchp3yyjSitxOX34cWcVNcWsRQ6hgG
      iHYXno7WPmKSrwOP4cN55j2quTKOcAK9XqScquCO9YOvm+zsHJ5IJxabFU+iExxOPDELOBpk
      ph+i6wfZR9eYvvo5qiGSGD9N0CtSroM/6H36vc76zDydw0M7UhXWl3FGkkhahWy2RjyZ2DX3
      zZkZYsPDqOUcsujG85K+UPsiEejqxOL24En00dhaxN01gL28jntkgkBngPW712l0JbF7HKSm
      pug+MfYuWwA7iQtXdnx2As6x08/OBEYnMXQNpfp0J3lRwupytzL2xVuZ+8fx9rW+dhw7ty0/
      P+7thsRbrpTHrpPfqKLVqgTHz3NwaGiCk/H3z3L33/6E/+PzVKoixaWvKOYrdB07xu0//IGm
      +mv6x59vUVjaXEXyd2KXK6TXMxjlTbY2cnSfuUhjfZrMZpbOk5Pc+8PvSRY+YqAvREN0sHTj
      9+iincSxs4iVddbX0jgDMYZOjh9gGY8yAt3vfUizVsPq8kBnDFGy0H8uioGI1eGgzxsF0Yql
      N4lcq+/Zh3hT3rpbIYgSNu/umw+8GSLBY+9uF0lRshLwOahXKxQLEkYmiyvWhy8apWt0fEfl
      B9DlGk+uX8OiFjD8Ayw8fMTgmVPMfX2XvoEQkkVm6cEKHaNjjL53msbSPaqiH2wejp87ztTD
      VbTyFic/+QlT166+s3IeRQTJguNZ3Wk92a3O54/F7cd2j+dAbHir9kQuF58dK+Ui+7+N8cGj
      Nspkigpua+tz8tQ5fGKG+ZkM6Cqapu24XrS5GLn0AeMXzrciFrqOplvpGEiy/GSBnvEhRAxE
      QUeR1WfhREEQEGhFZnS5iVwrU6/J77KoJruwRwtQZu63f8HdEcawBokfH0O0WNEVBa1WQLf5
      yc88IjF5AbVRI//wHoHzF1AyZZwhP7rcRLA5kCQJpV4F0YLV4QBAKazx+Pd/4fj/8r+987jv
      cyy4XQKz96Y59YufI9Ig2S2glTbINXwMHYtT8YyyMjOHkttE1kC0OOgcGcFhF5GsQbqHXNiG
      4iw+nqf7xGkcwgDZnEHfRD9OWzdLD6boH+klIroIOsfA5iE50I3UG2ThwRSi5eDHI44ypeUn
      5DbTOCNJYv29O+pCeSuFpDXQfXE8bgdQJT2bx+W34gzH2asrUF6dJbuewp3oI9rTtacNe7pA
      FqcXm9eDolrZun+bxJmLbNy6RigZQXY5AWhszpFbz6PkCwTEJuXVFIXpW9gjSZrlCr6Ii2pJ
      p5HP0PfJzzEMjezMAoHe7tbT8dAEINJ75sK2z258NsA/SPDpfuD+rn78AIzskt6JP9T6Dcbf
      b23Q4PGOEt52xciZCABWAFdrgqEvZCM1vYzaaNB3+sy+lebHSGkzQ/L8+6x99imVgBdDtGNV
      ChjuCJqqoFcK6I4wpewT8lvLKGoHdpcfmlkWpxYBge7J0xTmHlIplgkNnsIbdJNeXmPg/Y9+
      kA17ukCSw4XdH0ZrvnwQpJZJEz5xDm/8ebxecgeJjJ9AsgjU8zWipyZx+FvRlersLUqZMuWl
      Wcpb6R9k5D8a8dETTHz4EcGQ99UX/wOj1vIs3ficQlnArmYo5Wo0tlapVZsUVpcBMHSZ9OoW
      3WcmsYgCpdVltFoGxRrFa9MoZdcoFnS6+yNk061gjMfvZuH6Zyze/faVNuwhAAGllKG8toxg
      cWCzweadGzTrCoJkRRQFJJsNdzzB1q3PKaXSCIhINiuSrdW0SzYb7oiPzZtfUE61Krtn+CIj
      v/oVodHjeOOHOe3aoJrLUNhKtXz17d+oMrKsUtjYeNavqW6laKgazfqrR5Gb5SKVYhlzGGNv
      LK4gvRc/It7hpFRUWhHFF6ZcGICIoarPdoEEsLpciJKEoWsIohVdkfmuw+XtGqD3/PvIhdQr
      /wd7uEAe+v/5P7z0WwfgDbWa8O5Y/7Pz0eMj247P0Myu4wgY6N/rISfOvv8K0w4ahamrX9I5
      NsT01/c5deUCNreXeqmI06ZTrtvJzM3iSSQobyyzcOM2Pb/+NXo2j+ZTaBQzCM4QwbCf7PI8
      Dd1GZ18SpbDGt1/P4xDKhMbfp7Nr93k6JuAOeVm5+QUWR5RY/xCrd76mITqJuO1Ykj3YHVYM
      lxdiXtYfLePv6sUi+pFcTgKCE4fWCb4QavYBG09WEDpbrmgju0HqyWMSJ8690sM+8OnQtkAM
      r91DYND96ovfMXK1RG5tDXcoyurUfZKnLzH31VccO9tHKh1AAhrpeZaWqnh8HkBja3EZQ84T
      GjjB1t3baD1Bsk0f1Y0pOnqTqPUKVm+Yvu440/MLpgD2IDh0gu2/Ts/5y8+OXa7nW6Y6h04Q
      +l7agBPAhaGryNUqTcFPT2+rBxYcnCA4yA/iwKdDC5IFm8eH9I5me74OwZ4hJq5coZbdeHbO
      +F6jWdncIDZ2DLf/ub8u2Dx09CWxO2wUtsokxwdxulszHV2dYyQTVtYXVnH59nN8xGQ3BNFC
      8r0rDF35GJv19atzG78PICKX0jy6cQN3OEEwEuTJ9WvUGjqC1YXLZcPl9xMaOc76V//O2soW
      FlHC5ffh8rdiQy6/n66JYab/9u+szLY6bWgNMmspGoqF/vH+Pe5vchRo4zfCLJz+9W92nAlv
      azb7/MDTBvrML//p2XnfiWPPjntOnKSR28BmtxJIJFpxbNHB6OXtU0hMjjJtLID9wRHq4PiH
      Ha++0ORI0sYukImJKQCTNscUgElbYwrApK0xBWDS1pgCMGlr2i4M6rfbCbqsh23GS4m6nMyX
      jsayge1A2wmgJMsUj/C6QPuxHpDJD8d0gUzaGlMAJm2NKQCTtqaNBaBw4//5v/n2b3/hwVd3
      0Rsl8tkSuqaiNJvomsydP/4ZRVZ2pFq9d5NKTUUubPLozsPWW0xNGcMw0FUFpdnEMHTu//Hf
      qDdlmsUM5UrjWb6GYWAYOkqz8cKKEybvnrbrBD/HwNvRx8SVizz+659oVvysb0gs3/w7dn+Q
      +PAIG/OzRAdH6B7qfZZKk+tklpexKllk2c7Df/8Dgs2OIzaKWyyST21gDQ+SmreirWIAAAyw
      SURBVJ/D3tFNp08lJ/Zx79r/RTjZjRQawMjNodu8VCsNzv3s48P7CUzaWQDPeb62qUCst5vN
      5XUMq5uOgeEdlX83MqurRIdGqWTTyGoGXTIoporEBgYZPDlBY+keAMHuQcbPHefhw3UMbBy/
      eJGHVz/fNc9uj3dfokEem42ksPPFe6fFgvyaLY/HZsPy9DeySdJrp/+OiNP5RukOkjYWgEB5
      Y5EHn9UQ3HEcVhHJIiDXZSRRp15VsVJn/tEsA+PP1weVbE4CPT3YZBel+Swdg4PIukikr5P0
      gyWsfg8WqwWfy8HUjTsMdNpaCwhYrSAISBYJgSYPrl6lUt493r9Rq+xPOLT24ql+v4+8XH2t
      bLZfH3d5Xjv9dzgsLY97NOwn5j4aYmhjAVi5+K//844zY36A5++idnX9BkOXefLl5ygaCBYH
      w+fPY5UAV4LxMwlg4vn1vf/DrnfyACQvte5xOkh6XqJerSDY/ftaoh8LM7kSqerRGItpYwH8
      MATRxsj7H+5rnv5EJ9Zqg67w91/1NnnXmAI4BGwuDzbXwSz2avJ6tHEYVGP66t94ePUzVuZW
      dn5TL1Is1Fi8c4fvlsxKP7hPsdkkv7m1d7a6wsLtr3jw+eeUSg0y84+4//fPKJfNzYn3IvXw
      LtpLVlcuLs2iHFDEuI1bAA0VJ8cun+Prf/sTNuqEeofYePSAZF+USs1Ns1rB0BQeXfuc7Nwq
      40PDNEolqplVSvkKoivA8PF+pq59RUO3cO5nH4GmERk+TmczzeOpaZT8GpM/+YB7177mzE8/
      OOxCHykKi1NkV1OEx88i16roaoPlW9cR3GF6JoZZvvUVFn+c7N2/4hgsMHT+zL5vkNHGLQDk
      V2a5/5c/YvUnKGe20DSD/Po6erNEodDqpBWe3MYzeonB4yMI6BRSGYr5CuNXPsSoFVi6c4fu
      9z/B45IwDBCsDozSJne/mmJkcgBRciPZfaBVDrm0Rw2N9aknhPoG2Lh3E4DSzNdoni7k9XnW
      HnyNb+wSyYlxQn0j9Jw9t++VH3ZpASbifgzhx7jS/w8j4rJTLLYqd7B7iGOXz3Hjt5/iSQRR
      5QalXGHH9RaHjVqhiFjIs30x8+/W+rfZJarFCuVcHgC9UWDq3jzn//lXiALocol6fg3ReZjr
      oB5FBARBR1M1Qr2DyLl1LC438lqJYLIXm1ukXsjRtHsRJQG1KWNYrDv2o9sPXhBApt5gvlja
      15scJZ6/C2DB4xaY+vIGo1c+wevQmX/wgKFLlxG9AZI2K2J0HHckTPXBXbTOAbxWO5axYXi6
      ZG7n2DjugJel+/doyN/F7SV8PjuPrl0lOjzBxOXzLM2uMXFp8jCKe4QRGfrgI9YfzxAZPYkQ
      9OIIhIjJ3yLjJjQwQG7mIaWsQeL0edYePcR16hTSPgtAMIydIy6/nVnky9XUvt7kKHG2I8x6
      df/ckWYxzez9RziCCQYmRt56w49ur4emsT/7BO9Gv9/HVv3Nyx93eUjV3ix9h8vLhUQ3/+Xq
      N+Y4wD8Kdn+UiSume/NjZY9ehczCl1dZuH2HZkNBqeSpVbcP3avk1zZeSFVMtc4ppTTl0stD
      f/m1FQyglk2jHFSMy+RIo9TKVNJbNHZpDZR6nWYhS7P53WzcJuVUHqVRf+X+0WqjSiWTRlM1
      wECpV9H13RPtIYAGmuCna6SXmS+/AE1GVXU2vr3F3M2bFDeWufu735JaWtuRKj0/B4CcXSaX
      qZJ58i0z16+jqDqbD+8w8+UXVIs57v/uv7P88DGa0sTQNBZu/J2Za59Tb6gUFqeZvfEl6ZX1
      vUtq8qNm/fYNKuUii1f/SK1ap9lQUGtlFEWjls/S2FqlWmuiVAukZu6ztbBOI59FV+uUUptk
      llcwDGgW0mzNzSA3WmIpri5Ry20x8+WXVDeXmPrT72jUd3/IvjKuZPOGcVgN5FKacqlGemGZ
      YHcf3ngn8eFx4r07NyHT6wVmr19j8f4DtGaV1FqG7pEYi3efYHe50aqbpFaqxIZH6ZkYo7K1
      jtyUUVSJgbEE63OrpFYzDJy/QHF1YR9+ZpOjiqHJVLY2MCwexMoK6fUCpYUpCoUq+ZWl7y5i
      8dZNPOHW2v/F5SX00jLzUys0NxYoFzMsffMQt1RifTkHgDcaobi2jCsUx53oo2Og76U2vFIA
      ar2IrIqIAoDAyMc/o/DkFrlcHQwN43tbv4jOAEOXPqDv5HEEUaC8scTGfApfQGBjNUfyxDHQ
      VDCMHWklux1JsmAYOgYGulx/6cigyT8GFmeA3gsf4HHp1Cq7bxlr6E2s7jDuYHBHBCjQ3Y/L
      60Gu53BE+3D5v9uLwcDqi9J3/hLV1MrbbJFkR9TyLD+UGbh4CYtawo+T4vJjBF+SQDCA3hlg
      c24OtVJEN0Byegn1ttbEt4WShPERuHSRXCqPJ55Eq5XJZ2XCnZ0IoQFWH88S6ujB5rAT7u4B
      p4NIpwU8CitTUxjG0dtUw2T/kKwGKzevo8oW4oku0jdvU2nW6Og6gebzY3E5Ee0eJL3M4tf3
      sHh6sYut/RscTisWixerr5Py3HWWtooYXR8AOmu3r6No4El0UV6dJbOySrEE/ZcvvFDh3zoM
      ahg6qiyDAYIoIlltbxkK1Fm/9zWVQpnE5GV8PsfbZPYCP+vvRDXUV194SISdTmaL2QMLgw4H
      A6TrbzafHyDmdLP1hukTLg9nY137GgY1dJXV219SLxRJXPwnfN7X23v5rcOggiBite9nJRXp
      PHV+H/PbSVmWyTTevAIcNNoBrwvkkCx4bfY3Sht2OMk36/jtr04vCQJ+u4OS/DwS6LXt/8bg
      gmih+703n67+VgKo5nO4g6057fV8DlswhOm0HG2qqky++WZPX7skUfiBaSVBQBIFitsEYJeO
      3rDTHhaVuPnffk+wN4omBRk6M4HFbkdpNNBqBTRbkI3HUwxdvEyjlGft9m26fnKF+kYRX8SP
      Uq8iOX3YbBK1Qg4sDlxeD1olw8ydhxi1LIFjl8lOfYXV6cAZH6FnrO+dFdzEBF7RAlgdLmxO
      B5rFyeKdWwxd+oCZL6+S7IvRcLe2PS2vTLO5WaVZrYIok1tOsTX1Fd7kEKX0FJGok3LDRjm1
      zqlf/hLJE2H0g8ssXv0jFquIKFmxu11vPYXg9dGY+uwzFEOk89gkYZ9Isca23dt1Vp/MkxwZ
      2pEqv7aEK9qNpFVIZ2p0dCd2zX39yRMSIyOopRxN0Y3X88PdjojDeWB9AOGVO+e2F3sKwBmK
      Ee7uZnV6CctLriylM3SdukxOe940WjwhusaPUS9co5Kv03PpLIs3WhPsDE3h0Z8/JT75IX6P
      RsYeINSRILVR2P0GB4aGKjg5cfkct/7wR4I/uUClKlJcvEEhX6F7YoIbn37KafWfGTr2XASF
      jVWkQBf2ZoWt9TRGaYPNjRx9Zy9RX3/M1kaW5Kkz3P70U3oKVYb7wjQkB/PXP8UQ7XRMnEOq
      rLOymsYViDF6evwFy1RDPcC+wP774T9m9hgHEKnnNth48gSL24vLKTFz/RqNhoZotSFJIjan
      k2Cyi4Uv/kp2M4uIiM1px/Z0+Qub00moI8TM55+TWW+9SdVIPaFct5Cfn6JaMzCaBTbn5nH6
      Au+ivC+W0mIl5HdQq1TI56sUM1lckU780Qg9Y8d2VH4AQ67x6IurPLj+FbIKsw8e0dmf4Mmt
      b7A5nEgWmYVvl+kaG2Pi/CRaLU+5KiPYPJy6dIbU8gorSxtMfvwRzVJ6V5tkXUM5oD+TnezR
      AniY/E//sse3EI6cBWAi/nw/3J7To9uOz1JNLeP0VNGMCADOzgku/MvzlRT8P//VG5q+P6iN
      EumCwuDTB2Pv6feQNx8xMxPC0FU0TUOSnnftBZuL8csXsDe3eDyTpm7oaLqVzsFuFqYfMH5u
      mOkHFUTBQJG3hVsFoeXmCaDJTZq1MrXa7oM/Ju+OA++Wu6JJugIxJOtRa3oteN0i03enOfvL
      XyDSoKdHQC+tk2n6GT0ep+wZZXF6FiWXQtZBtNhJjozitIuI1iC9Qy5sw3Hmp+bpPTWJSxgg
      nTMYPD6Ay97N/P2HDI71EhNdhJzjYPPQM9iDpS/E3LcPkSxvFo402T8OXACCuN/jBPuFSP/Z
      C9s+uwnYgMAQoZ7WmUBygJZjNvpCanASCLdcveMftDrCXu8YkW1XjJ9rTZO2Abhax4GQjY3H
      Syj1BgOTZ/etNCZvxtELzLYBHWMn6Rg7bCtMoM1fijcxMQVg0taYAjBpa0wBmLQ1pgBM2hpT
      ACZtjSkAk7bmhTfC6opK8x948za7JKEZR/dl49b6lwf3UowoCG880/R100rfu14URGySRKkp
      H/iLPz+U/x/wmoMiP1RelQAAAABJRU5ErkJggg==
    </thumbnail>
  </thumbnails>
</workbook>
